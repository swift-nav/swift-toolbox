env_scripts = [
  '''
#!@duckscript
# set os specific env vars
os = os_family
set_env OS "${os}"
if eq ${os} windows
  set_env STANDALONE_PY_URL "${PY_BASE_URL}/cpython-3.9.7-x86_64-pc-windows-msvc-shared-pgo-20211017T1616.tar.zst"
  set_env PYTHON "${WORKSPACE}\\py39\\python.exe"
  set_env DIST_PYTHON "${WORKSPACE}\\py39-dist\\python"
  set_env PYSIDE2_RCC "${WORKSPACE}\\py39\\Lib\\site-packages\\PySide2\\rcc.exe"
  set_env BACKEND_WHEEL console_backend-0.1.0-cp39-cp39-win_amd64.whl
  set_env BUILD_TRIPLET "x86_64-pc-windows-msvc"
  set_env PYO3_CONFIG_FILE "${WORKSPACE}\\standalone-py\\pyo3_config.txt"
  set_env CONSOLE_PYO3_CONFIG_FILE "${WORKSPACE}\\standalone-py\\pyo3_config.txt"
elseif eq ${os} linux
  set_env STANDALONE_PY_URL "${SWFT_PY_BASE_URL}/cpython-3.9.10-x86_64-unknown-linux-gnu-pgo+lto-20220203T2103.tar.zst"
  set_env PYTHON "${WORKSPACE}/py39/bin/python3"
  set_env DIST_PYTHON "${WORKSPACE}/py39-dist/bin/python3"
  set_env PYSIDE2_RCC "${WORKSPACE}/py39/bin/pyside2-rcc"
  set_env BACKEND_WHEEL console_backend-0.1.0-cp39-cp39-linux_x86_64.whl
  set_env PYO3_CONFIG_FILE "${WORKSPACE}/standalone-py/pyo3_config.txt"
  set_env CONSOLE_PYO3_CONFIG_FILE "${WORKSPACE}/standalone-py/pyo3_config_console.txt"
  output = exec --fail-on-error gcc -dumpmachine
  triplet = trim ${output.stdout}
  set_env BUILD_TRIPLET ${triplet}
else
  set_env STANDALONE_PY_URL "${PY_BASE_URL}/cpython-3.9.7-x86_64-apple-darwin-pgo+lto-20211017T1616.tar.zst"
  set_env PYTHON "${WORKSPACE}/py39/bin/python3"
  set_env DIST_PYTHON "${WORKSPACE}/py39-dist/bin/python3"
  set_env PYSIDE2_RCC "${WORKSPACE}/py39/bin/pyside2-rcc"
  set_env BACKEND_WHEEL console_backend-0.1.0-cp39-cp39-macosx_10_15_x86_64.whl
  set_env PYO3_CONFIG_FILE "${WORKSPACE}/standalone-py/pyo3_config.txt"
  set_env CONSOLE_PYO3_CONFIG_FILE "${WORKSPACE}/standalone-py/pyo3_config_console.txt"
  output = exec --fail-on-error gcc -dumpmachine
  triplet = trim ${output.stdout}
  set_env BUILD_TRIPLET ${triplet}
end
''',
]

[config]
default_to_workspace = false
init_task = "init"
skip_git_env_info = true
skip_rust_env_info = true
skip_crate_env_info = true

[env]
WORKSPACE = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
PY_BASE_URL = "https://github.com/indygreg/python-build-standalone/releases/download/20211017"
SWFT_PY_BASE_URL = "https://github.com/swift-nav/python-build-standalone/releases/download/20220205%2Bswift"
MACOSX_DEPLOYMENT_TARGET = "10.15"
APP_NAME = "swift-console"

[tasks.init]

# Two proposed methods of simplifying path globbing # https://github.com/sagiegurari/cargo-make/issues/542 # https://github.com/sagiegurari/cargo-make/issues/543
[tasks.set-qml-files]
private = true
condition = { env_not_set = ["QML_FILES"] }
script_runner = "@duckscript"
script = '''
!include_files ./utils/glob.ds
qml_files = glob_paths_excluding_target resources/**/*.qml
set_env QML_FILES ${qml_files}
'''

[tasks.set-qml-app]
private = true
condition = { env_not_set = ["QT_APP"] }
script_runner = "@duckscript"
script = '''
python = get_env PYTHON
output = exec ${python} utils/echo-qt-dir.py
qt_app = trim ${output.stdout}
set_env QT_APP ${qt_app}
'''

[tasks.set-python-files]
private = true
condition = { env_not_set = ["PYTHON_FILES"] }
script_runner = "@duckscript"
script = '''
!include_files ./utils/glob.ds
py_files = glob_paths_excluding_target ./**/*.py
set_env PYTHON_FILES ${py_files}
'''

[tasks.rustup-update]
command = "rustup"
args = ["update", "stable"]

[tasks.taplo-cli-update]
install_crate = { crate_name = "taplo-cli", binary = "taplo", test_arg = [
  "--help",
], version = "0.6.0" }

[tasks.cargo-make-deps-update]
dependencies = ["rustup-update", "taplo-cli-update"]
install_crate = { crate_name = "cargo-update", binary = "cargo-install-update", test_arg = [
  "-V",
], min_version = "7.0.1" }
command = "cargo"
args = ["install-update", "cargo-make"]

[tasks.generate-common-constants-rs]
script_runner = "@duckscript"
script = '''
python = get_env PYTHON
exec ${python} -m py2many --rust=1 swiftnav_console/constants.py
mv swiftnav_console/constants.rs console_backend/src/common_constants.rs
'''

[tasks.extract-piksi-constants-rs]
script_runner = "@duckscript"
script = '''
python = get_env PYTHON
output = exec --fail-on-error ${python} utils/extract_piksi_tools_constants.py
writefile /tmp/piksi_tools_constants.py ${output.stdout}
exec --fail-on-error ${python} -m py2many --rust=1 /tmp/piksi_tools_constants.py --outdir console_backend/src/
'''

[tasks.generate-resources]
dependencies = ["build-splash-version"]
script_runner = "@duckscript"
script = '''
  exec --fail-on-error "${PYSIDE2_RCC}" "resources/console_resources.qrc" "-o" "swiftnav_console/console_resources.py" "-g" "python"
'''

[tasks.check-capnp]
script_runner = "@shell"
script = '''
capnp compile -oc++ src/main/resources/base/console_backend.capnp
rm src/main/resources/base/console_backend.capnp.c++
rm src/main/resources/base/console_backend.capnp.h
'''

[tasks.copy-capnp]
dependencies = ["check-capnp"]
script_runner = "@shell"
script = '''
cp src/main/resources/base/console_backend.capnp console_backend/console_backend.capnp
'''

[tasks.remove-egg-dist]
script_runner = "@shell"
script = '''
rm -rf console_backend/*.dist-info
rm -rf console_backend/*.egg-info
'''

[tasks.remove-egg-dist.windows]
script_runner = "powershell"
script_extension = "ps1"
script = '''
Get-ChildItem .\console_backend -Recurse -Include @("*.egg-info", "*.dist-info") | Remove-Item -Force -Recurse
'''

[tasks.start-console]
command = "${PYTHON}"
args = ["-m", "swiftnav_console.main", "${@}"]

[tasks.start-console-gdb]
command = "rust-gdb"
args = [
  "-ex",
  "run",
  "--args",
  "${PYTHON}",
  "-m",
  "swiftnav_console.main",
  "${@}",
]

[tasks.qml-run]
dependencies = ["generate-resources"]
run_task = "start-console"

[tasks.run]
dependencies = [
  "copy-capnp",
  "generate-resources",
  "remove-egg-dist",
  "store-version",
  "install-backend",
]
run_task = "start-console"

[tasks.gdb-run]
dependencies = [
  "copy-capnp",
  "generate-resources",
  "remove-egg-dist",
  "store-version",
  "install-backend",
]
run_task = "start-console-gdb"

[tasks.prod-run]
dependencies = [
  "copy-capnp",
  "generate-resources",
  "remove-egg-dist",
  "store-version",
  "prod-install-backend",
]
run_task = "start-console"

[tasks.headless-run]
command = "cargo"
args = [
  "run",
  "--bin",
  "headless-console",
  "--release",
  "--no-default-features",
  "${@}",
]

[tasks.store-version]
script_runner = "@shell"
script = '''
git describe --tags --always > console_backend/src/version.txt
'''

[tasks.install-backend]
command = "${PYTHON}"
args = ["-m", "pip", "install", "-e", "./console_backend"]

[tasks.prod-install-backend]
command = "${PYTHON}"
args = [
  "-m",
  "pip",
  "install",
  "-v",
  "--upgrade",
  "--force",
  "./console_backend",
]

[tasks.build-frontend-wheel]
command = "${PYTHON}"
args = ["-m", "flit", "build", "--no-setup-py"]

[tasks.build-backend-wheel]
cwd = "console_backend"
command = "${PYTHON}"
args = ["setup.py", "-vv", "bdist_wheel"]

[tasks.get-get-pip]
script_runner = "@duckscript"
script = '''
wget -O ./get-pip.py https://bootstrap.pypa.io/get-pip.py
'''

[tasks.write-pyo3-config-console]
script_runner = "@duckscript"
cwd = "standalone-py"
condition = { files_not_exist = ["${CONSOLE_PYO3_CONFIG_FILE}"] }
script = '''
writefile pyo3_config_console.txt "implementation=CPython\nversion=3.9\nshared=true\nabi3=false\nlib_name=python3.9\nlib_dir=${WORKSPACE}/standalone-py/python/install/lib\nexecutable=${WORKSPACE}/standalone-py/python/install/bin/python3.9\npointer_width=64\nbuild_flags=WITH_THREAD\nsuppress_build_script_link_lines=false\nextra_build_script_line=cargo:rustc-link-lib=python3.9\nextra_build_script_line=cargo:rustc-link-search=${WORKSPACE}/standalone-py/python/install/lib\n"
'''

[tasks.write-pyo3-config-console.windows]
script_runner = "@duckscript"
script = ""

[tasks.write-pyo3-config]
script_runner = "@duckscript"
cwd = "standalone-py"
condition = { files_not_exist = ["${PYO3_CONFIG_FILE}"] }
script = '''
writefile pyo3_config.txt "implementation=CPython\nversion=3.9\nshared=true\nabi3=false\nlib_name=python3.9\nlib_dir=${WORKSPACE}/standalone-py/python/install/lib\nexecutable=${WORKSPACE}/standalone-py/python/install/bin/python3.9\npointer_width=64\nbuild_flags=WITH_THREAD\nsuppress_build_script_link_lines=false\nextra_build_script_line=\n"
'''

[tasks.write-pyo3-config.windows]
script_runner = "@duckscript"
cwd = "standalone-py"
condition = { files_not_exist = ["${PYO3_CONFIG_FILE}"] }
script = '''
writefile pyo3_config.txt "implementation=CPython\nversion=3.9\nshared=true\nabi3=false\nlib_name=python39\nlib_dir=${WORKSPACE}\\standalone-py\\python\\install\\libs\nexecutable=${WORKSPACE}\\standalone-py\\python\\install\\python.exe\npointer_width=64\nbuild_flags=WITH_THREAD\nsuppress_build_script_link_lines=false\nextra_build_script_line=\n"
'''

[tasks.get-standalone-py]
dependencies = ["get-get-pip", "write-pyo3-config"]
cwd = "standalone-py"
condition = { files_not_exist = ["${WORKSPACE}/standalone-py/python"] }
script_runner = "@duckscript"
script = '''
wget -O py39.tar.zst ${STANDALONE_PY_URL}
exec --fail-on-error zstd -f -d py39.tar.zst
exec --fail-on-error tar -xvf py39.tar
'''

[tasks.install-pyside-wheels]
env = { USE_PYTHON = { value = "${PYTHON}", condition = { env_not_set = [
  "USE_PYTHON",
] } }, OS_WHEEL_LABEL = { source = "${OS}", default_value = "unknown", mapping = { "linux" = "linux_x86_64", "mac" = "macosx_10_13_x86_64", "windows" = "win_amd64" } } }
script_runner = "@duckscript"
script = '''
exec --fail-on-error ${USE_PYTHON} -m pip install pyside-wheels/shiboken2-5.15.2.1-5.15.2-cp39-cp39-${OS_WHEEL_LABEL}.whl
exec --fail-on-error ${USE_PYTHON} -m pip install pyside-wheels/PySide2-5.15.2.1-5.15.2-cp39-cp39-${OS_WHEEL_LABEL}.whl
'''

[tasks.setup-builder]
dependencies = ["get-standalone-py"]
script_runner = "@duckscript"
script = '''
if is_path_exists py39
  rm -r py39
end
mkdir py39
cd standalone-py/python/install
cp . ../../../py39
cd ../../../
exec --fail-on-error ${PYTHON} ./get-pip.py
exec --fail-on-error ${PYTHON} -m pip install wheel flit . ".[test]"
cm_run_task install-pyside-wheels
cm_run_task generate-resources
'''

[tasks.prep-dist]
script_runner = "@duckscript"
script = '''
cm_run_task copy-capnp
cm_run_task store-version
if is_path_exists py39-dist
  rm -r py39-dist
end
mkdir py39-dist
cd standalone-py/python/install/
cp . ../../../py39-dist
cd ../../..
exec --fail-on-error ${DIST_PYTHON} ./get-pip.py
'''

[tasks.install-imagemagick]

[tasks.install-imagemagick.windows]
script_runner = "@duckscript"
script = '''
wget -O imagemagick.tool.7.1.0.nupkg https://github.com/swift-nav/swift-toolchains/releases/download/imagemagick-7.1.0/imagemagick.tool.7.1.0.nupkg
exec --fail-on-error choco install -q -y vcredist2010 --version=10.0.40219.1
exec --fail-on-error choco install -q -y ./imagemagick.tool.7.1.0.nupkg
rm imagemagick.tool.7.1.0.nupkg
'''

[tasks.install-imagemagick.linux]
script = "sudo apt-get install gsfonts imagemagick"

[tasks.install-imagemagick.mac]
script = "brew install imagemagick"

[tasks.build-splash-version]
script_runner = "@duckscript"
script = '''
output = exec --fail-on-error git describe --always --tags --dirty
version = trim ${output.stdout}
os = os_family
if eq ${os} windows
  exec --fail-on-error magick convert -font arial -pointsize 14 -fill "#FFA400" -gravity south -annotate +0+5 ${version} ./resources/images/splash.jpg ./resources/images/splash-version.jpg
else
  exec --fail-on-error convert -font helvetica -pointsize 14 -fill "#FFA400" -gravity south -annotate +0+5 ${version} ./resources/images/splash.jpg ./resources/images/splash-version.jpg
end
'''

[tasks.build-windowpos-bin]
dependencies = ["build-splash-version"]
command = "cargo"
args = [
  "build",
  "--release",
  "-vv",
  "--features",
  "winit",
  "--bin",
  "windowpos",
]

[tasks.build-console-bin]
command = "cargo"
args = [
  "build",
  "--release",
  "-vv",
  "--features=entrypoint",
  "--bin",
  "${APP_NAME}",
]

[tasks.build-console-bin.linux]
dependencies = ["build-windowpos-bin"]
command = "cargo"
args = [
  "build",
  "--release",
  "-vv",
  "--features",
  "entrypoint,splash",
  "--bin",
  "${APP_NAME}",
]

[tasks.build-console]
env = { PYO3_CONFIG_FILE = "${CONSOLE_PYO3_CONFIG_FILE}" }
dependencies = ["write-pyo3-config-console"]
run_task = "build-console-bin"

[tasks.build-console.windows]
dependencies = ["build-console-bin"]

[tasks.build-dist-install-console]
dependencies = ["build-console"]
script_runner = "@duckscript"
script = '''
app_name = get_env APP_NAME
cp target/release/${app_name} py39-dist/${app_name}
os = os_family
if eq ${os} mac
  exec --fail-on-error install_name_tool -change /install/lib/libpython3.9.dylib @rpath/libpython3.9.dylib py39-dist/${app_name}
  exec --fail-on-error install_name_tool -add_rpath @executable_path/../Resources/lib py39-dist/${app_name}
  exec --fail-on-error install_name_tool -add_rpath @executable_path/lib py39-dist/${app_name}
elseif eq ${os} linux
  cp target/release/windowpos py39-dist/windowpos
end
'''

[tasks.build-dist-install-console.windows]
script = '''
cp target/release/${APP_NAME}.exe py39-dist/${APP_NAME}.exe
cp target/release/${APP_NAME}.d py39-dist/${APP_NAME}.d
if is_path_exists target/release/swift_console.pdb
  cp target/release/swift_console.pdb py39-dist/swift_console.pdb
end
cp target/x86_64-pc-windows-msvc/release/console_backend.pdb py39-dist/Lib/site-packages/console_backend/console_backend.pdb
'''

[tasks.build-dist-install-frontend-wheel]
env = { USE_PYTHON = "${DIST_PYTHON}" }
dependencies = ["build-frontend-wheel"]
script_runner = "@duckscript"
script = '''
exec --fail-on-error ${DIST_PYTHON} -m pip install ./dist/swiftnav_console-0.1.0-py3-none-any.whl --force-reinstall
cm_run_task install-pyside-wheels
'''

[tasks.build-dist-install-backend-wheel]
dependencies = ["build-backend-wheel"]
command = "${DIST_PYTHON}"
args = ["-m", "pip", "install", "console_backend/dist/${BACKEND_WHEEL}"]

[tasks.build-dist-copy-resources]
script_runner = "@duckscript"
script = '''
cp src/main/resources py39-dist/
'''

[tasks.build-dist-freeze]
script_runner = "@duckscript"
script = '''
touch ./py39-dist/.frozen
'''

[tasks.build-dist]
dependencies = ["prep-dist"]
run_task = [
  { name = [
    "build-dist-install-frontend-wheel",
    "build-dist-install-backend-wheel",
    "build-dist-install-console",
    "build-dist-copy-resources",
    "build-dist-freeze",
  ] },
]

[tasks.purge-dist]
env = { PYTHONDONTWRITEBYTECODE = "1" }
cwd = "py39-dist"
script_runner = "@duckscript"
script = '''
py_folders = array test tests examples __pycache__ demos turtledemo translations idlelib lib/tcl8 lib/tcl8.6 lib/tk8.6 shiboken2/docs ensurepip lib2to3 tkinter unittest include
qt_folders = array plugins/geoservices plugins/virtualkeyboard plugins/sqldrivers lib/Tix8.4.3 tcl/tix8.4.3 Qt/resources PySide2/resources
qml_folders = array qml/QtWeb* qml/QtBluetooth* qml/QtNfc* qml/QtGamepad qml/QtTest qml/QtQuick3D qml/Qt3D qml/QtSensors qml/QtLocation qml/QtPositioning
all_folders = array_concat ${py_folders} ${qt_folders} ${qml_folders}

for name in ${all_folders}
    folders = glob_array **/${name}/
    for folder in ${folders}
        rm -r ${folder}
    end
end

file_exts = array pyc pyi tcl gif png

for ext in ${file_exts}
    files = glob_array **/*.${ext}
    for file in ${files}
        if eq ${ext} png
            is_qtquick = contains ${file} QtQuick
            if not is_qtquick
                rm ${file}
            end
        else
            rm ${file}
        end
    end
end

libs = array QtSensors QtLocation Qt5Location QtPositioning Qt3D Qt53D Qt5Nfc Qt5Web QtWeb Qt5Pdf Qt5Designer Qt5DesignerComponents Qt5VirtualKeyboard Qt5Bluetooth Qt5Quick3D

for lib in ${libs}
    files = glob_array ./**/*${lib}*
    for file in ${files}
        echo ${file}
        rm -r ${file}
    end
end

os = os_family

if eq ${os} windows
    rm -r ./Scripts

    rm -r ./include
    rm -r ./tcl

    globs = array _test*.pyd libcrypto*.dll libssl*.dll tcl*.dll tk*.dll
    for glob in ${globs}
        files = glob_array ./DLLs/${glob}
        for file in ${files}
            rm ${file}
        end
    end

    qtbins = glob_array ./Lib/site-packages/PySide2/*.exe
    for bin in ${qtbins}
        rm ${bin}
    end

    all_dlls = glob_array ./**/*.dll
    for dll in ${all_dlls}
        if ends_with ${dll} "d.dll"
            dll_no_debug = substring ${dll} -5 # remove d.dll
            dll_no_debug = concat ${dll_no_debug} ".dll"
            if is_path_exists ${dll_no_debug}
                rm ${dll}
            end
        end
    end
else
    rm -r ./share

    bins = array rcc uic designer pyside2-lupdate Designer.app
    for bin in ${bins}
        files = glob_array ./**/PySide2/${bin}
        for bin in ${files}
            rm -r ${bin}
        end
    end
end

exec --fail-on-error ${DIST_PYTHON} -m pip uninstall -y pip setuptools wheel flit
exec --fail-on-error ${DIST_PYTHON} -m compileall -b -f -o 1 -o 2 .

if eq ${os} windows
    globs = array pyexpat.* sqlite3.* _ctypes_test.* _bz2.* _decimal.* _elementtree.* _multiprocessing.* _sqlite3.* _ssl.* _tkinter.* _uuid.* _zoneinfo.* _msi.* _test*.*
    for glob in ${globs}
        files = glob_array ./DLLs/${glob}
        for file in ${files}
            rm ${file}
        end
        files = glob_array ./libs/${glob}
        for file in ${files}
            rm ${file}
        end
    end
else
    globs = array *.a
    for glob in ${globs}
        files = glob_array ./lib/**/${glob}
        for file in ${files}
            rm ${file}
        end
    end
endif

if eq ${os} mac
    rm -r lib/python3.9/site-packages/PySide2/Designer.app/

    rm lib/python3.9/lib-dynload/_testcapi.cpython-39-darwin.so
    rm lib/python3.9/lib-dynload/xxlimited.cpython-39-darwin.so

    rm -r lib/python3.9/venv/

    rm -r lib/pkgconfig/
    rm -r lib/thread2.8.5/
endif

py_internal_libs = array Lib/email Lib/distutils Lib/http Lib/multiprocessing Lib/msilib Lib/http Lib/dbm Lib/curses Lib/xml Lib/xmlrpc Lib/urllib Lib/ensurepip Lib/venv Lib/wsgiref Lib/lib2to3

for name in ${py_internal_libs}
    folders = glob_array **/${name}/
    for folder in ${folders}
        rm -r ${folder}
    end
end

files = glob_array ./**/*.py

for file in ${files}
    rm ${file}
end
'''

[tasks.strip-dist-pdb.windows]
cwd = "py39-dist"
script_runner = "@duckscript"
script = '''
files = glob_array **/*.pdb
for file in ${files}
    echo "Removing ${file}..."
    rm -f ${file}
end
'''

[tasks.strip-dist]
script_runner = "@duckscript"
script = '''
app_name = get_env APP_NAME
exec --fail-on-error strip ./py39-dist/${app_name}
rm -r ./py39-dist/bin
'''

[tasks.strip-dist.windows]
script_runner = "@duckscript"
script = '''
cm_run_task strip-dist-pdb
app_name = get_env APP_NAME
exec --fail-on-error strip.exe ./py39-dist/${app_name}.exe
rm ./py39-dist/python.exe
rm ./py39-dist/pythonw.exe
'''

[tasks.compress-dist]
env = { ARCHIVE_NAME = "swift-toolbox" }
script_runner = "@duckscript"
script = '''
output = exec --fail-on-error date +%Y-%m-%d
date = trim ${output.stdout}
output = exec --fail-on-error git describe --always --tags --dirty
version = trim ${output.stdout}
output_name = set "${ARCHIVE_NAME}-${version}-${BUILD_TRIPLET}-${date}"
exec --fail-on-error tar -C "py39-dist" -cvf "${output_name}-debug.tar" .
cm_run_task strip-dist
exec --fail-on-error tar -C "py39-dist" -cvf "${output_name}.tar" .
exec --fail-on-error rm -f "${output_name}.tar.xz"
exec --fail-on-error xz -T 0 -e -9 "${output_name}-debug.tar"
exec --fail-on-error xz -T 0 -e -9 "${output_name}.tar"
'''

[tasks.create-dist]
run_task = [{ name = ["build-dist", "purge-dist", "compress-dist"] }]

[tasks.dist-to-installer]

[tasks.create-mac-icns-file]
script_runner = "@duckscript"
script = '''
exec --fail-on-error iconutil --convert icns ./installers/macOS/desktop-icon.iconset --output ./installers/macOS/icon.icns
'''

[tasks.dist-to-installer-env]
[tasks.dist-to-installer-env.mac]
script_runner = "@duckscript"
script = '''
app_name = get_env APP_NAME
set_env FINAL_DIR "installers/macOS"
set_env TMP_DIR "target/installer"
set_env CONTENTS_MACOS_DIR "MacOS"
set_env CONTENTS_RESOURCES_DIR "Resources"
set_env APP_FILE_PREFIX "Swift Console"
set_env APP_ORIGINAL_NAME "${app_name}"
set_env VERSION_PATH "console_backend/src/version.txt"
set_env INFO_PLIST_PATH "installers/macOS/Info.plist"
set_env ICNS_PATH "installers/macOS/icon.icns"
set_env BACKGROUND_PATH "resources/images/LogoBackground.jpg"
'''

[tasks.dist-to-installer-app]
[tasks.dist-to-installer-app.mac]
dependencies = ["dist-to-installer-env", "store-version"]
script_runner = "@duckscript"
script = '''
final_dir = get_env FINAL_DIR
tmp_dir = get_env TMP_DIR
app_original_name = get_env APP_ORIGINAL_NAME
app_file_prefix = get_env APP_FILE_PREFIX
app_dir_name = set "${app_file_prefix}.app"
contents_dir = set ${tmp_dir}/${app_dir_name}/Contents
contents_mac_os = get_env CONTENTS_MACOS_DIR
contents_mac_os = set ${contents_dir}/${contents_mac_os}
contents_resources_dir = get_env CONTENTS_RESOURCES_DIR
contents_resources_dir = set ${contents_dir}/${contents_resources_dir}
info_plist_path = get_env INFO_PLIST_PATH
icns_path = get_env ICNS_PATH
version_path = get_env VERSION_PATH
version = readfile ${version_path}
version = trim_end ${version}

if is_path_exists ${tmp_dir}
  rm -r ${tmp_dir}
end

mkdir ${contents_dir}
mkdir ${contents_mac_os}
exec --fail-on-error cp -r py39-dist "${contents_resources_dir}"
exec --fail-on-error mv ./${contents_resources_dir}/${app_original_name} "./${contents_mac_os}/${app_file_prefix}"
cp ./${info_plist_path} ./${contents_dir}/Info.plist
exec --fail-on-error sed -i "" -e "s/@@VERSION@@/${version}/g" "${contents_dir}/Info.plist"
mkdir ${contents_resources_dir}
cp ${icns_path} ./${contents_resources_dir}/${app_file_prefix}.icns
'''

[tasks.dist-to-installer-dmg]
[tasks.dist-to-installer-dmg.mac]
dependencies = ["dist-to-installer-env"]
script_runner = "@duckscript"
script = '''
final_dir = get_env FINAL_DIR
tmp_dir = get_env TMP_DIR
app_original_name = get_env APP_ORIGINAL_NAME
app_file_prefix = get_env APP_FILE_PREFIX
app_dir_name = set "${app_file_prefix}.app"
icns_path = get_env ICNS_PATH
background_path = get_env BACKGROUND_PATH

version_path = get_env VERSION_PATH
version = readfile ${version_path}
version = trim_end ${version}
dmg_path = set ./${final_dir}/${app_original_name}_${version}-beta_macos.dmg

old_dmgs = glob_array "./${final_dir}/*.dmg"
for path in ${old_dmgs}
    rm ${path}
end

exec --fail-on-error create-dmg --volname "${app_file_prefix}" --volicon "${icns_path}" --background "${background_path}" --hdiutil-verbose --window-pos 200 120 --window-size 800 400 --icon-size 100 --icon "${app_dir_name}" 200 190 --hide-extension "${app_dir_name}" --app-drop-link 600 185 "${dmg_path}" "${tmp_dir}"
'''

[tasks.dist-to-installer.mac]
dependencies = ["dist-to-installer-app", "dist-to-installer-dmg"]

[tasks.dist-to-installer-env.linux]
script_runner = "@duckscript"
script = '''
app_name = get_env APP_NAME
set_env TMP_DIR "target/installer"
set_env OPT_DIR "opt"
set_env USR_DIR "usr"
set_env APP_DIR_NAME "${app_name}"
set_env APPS_DIR "share/applications"
set_env ICONS_DIR "share/icons/hicolor"
version = readfile console_backend/src/version.txt
version = trim_end ${version}
set_env VERSION ${version}
set_env VLESS_VERSION ${version}
if starts_with ${version} v
  vless_version = substring ${version} 1
  set_env VLESS_VERSION ${vless_version}
end
set_env HOMEPAGE "https://www.swiftnav.com"
set_env MAINTAINER "Swift Navigation <https://www.swiftnav.com/support>"
set_env DESCRIPTION "The Swift Console provides data visualization, settings management, and firmware update capabilities for Swift Navigation GNSS products."
'''

[tasks.dist-to-installer.linux]
dependencies = ["dist-to-installer-env"]
script_runner = "bash"
script = '''

set -ex

if [ -d $TMP_DIR ]; then
  rm -rf $TMP_DIR
fi

mkdir -p "$TMP_DIR/$OPT_DIR"
cp -r py39-dist/ "$TMP_DIR/$OPT_DIR/$APP_DIR_NAME/"

mkdir -p "$TMP_DIR/$USR_DIR/$APPS_DIR"
cp "installers/Linux/$APP_DIR_NAME.desktop" "$TMP_DIR/$USR_DIR/$APPS_DIR/"

mkdir -p "$TMP_DIR/$USR_DIR/$ICONS_DIR"
cp -r installers/Linux/hicolor/* "$TMP_DIR/$USR_DIR/$ICONS_DIR"

DEB_PKG_DEPS="\
  libxcb1 \
  libxcb-xkb1 \
  libxcb-icccm4 \
  libxcb-image0 \
  libxcb-render-util0 \
  libxcb-keysyms1 \
  libxcb-xinerama0 \
  libxkbcommon-x11-0"

declare -a DEPENDS_SWITCHES

for dep in $DEB_PKG_DEPS; do
  DEPENDS_SWITCHES+=("--depends ${dep}")
done

fpm \
  --verbose \
  --force \
  --input-type dir \
  --output-type deb \
  ${DEPENDS_SWITCHES[*]} \
  --maintainer "$MAINTAINER" \
  --description "$DESCRIPTION" \
  --url "$HOMEPAGE" \
  --version "$VLESS_VERSION" \
  --package "${APP_DIR_NAME}_${VERSION}_linux.deb" \
  --chdir "$TMP_DIR" \
  --name "$APP_DIR_NAME" \
  "$OPT_DIR" \
  "$USR_DIR"

mv *.deb installers/Linux/
'''

[tasks.install-nsis-plugin]
script_runner = "@duckscript"
script = '''
inetc_filepath = set installers/Windows/NSIS/Plugins/x86-unicode/INetC.dll
if not is_path_exists ${inetc_filepath}
  exec --fail-on-error unzip -d installers/Windows/NSIS installers/Windows/NSIS/Inetc.zip
end
nsprocess_filepath = set installers/Windows/NSIS/Plugin/nsProcess.dll
if not is_path_exists ${nsprocess_filepath}
  exec --fail-on-error unzip -d installers/Windows/NSIS installers/Windows/NSIS/nsProcess.zip
  exec --fail-on-error mv installers/Windows/NSIS/Plugin/nsProcessW.dll installers/Windows/NSIS/Plugin/nsProcess.dll
end
'''

[tasks.dist-to-installer.windows]
dependencies = ["install-nsis-plugin"]
script_runner = "@shell"
script = '''
makensis /V4  .\installers\Windows\Installer.nsi
'''

[tasks.qml-format]
dependencies = ["set-qml-files", "set-qml-app"]
script_runner = "@shell"
script = '''
${QT_APP}/Qt/bin/qmlformat -i ${QML_FILES}
'''

[tasks.qml-format.windows]
dependencies = ["set-qml-files", "set-qml-app"]
script_runner = "powershell"
script_extension = "ps1"
script = '''
& ${env:QT_APP}\Qt\bin\qmlformat -i $(-split ${env:QML_FILES})
'''

[tasks.qml-lint]
dependencies = ["set-qml-files", "set-qml-app"]
script_runner = "@shell"
script = '''
${QT_APP}/Qt/bin/qmllint -I ${QT_APP}/../PySide2/Qt/qml/ -I resources/ ${QML_FILES}
'''

[tasks.qml-lint.windows]
dependencies = ["set-qml-files", "set-qml-app"]
script_runner = "powershell"
script_extension = "ps1"
script = '''
& ${env:QT_APP}\Qt\bin\qmllint -I ${env:QT_APP}\..\PySide2\Qt\qml -I resources $(-split ${env:QML_FILES})
'''

[tasks.qml-format-check]
dependencies = ["qml-format"]
run_task = "check-git-diff"

[tasks.rust-format]
dependencies = ["copy-capnp"]
command = "cargo"
args = ["fmt", "--all"]

[tasks.rust-format-check]
dependencies = ["copy-capnp"]
command = "cargo"
args = ["fmt", "--", "--check"]

[tasks.rust-lint]
dependencies = ["store-version", "copy-capnp"]
command = "cargo"
args = ["clippy", "--all-targets", "--", "--deny", "warnings"]

[tasks.rust-tests]
dependencies = ["store-version", "copy-capnp"]
command = "cargo"
cwd = "console_backend"
args = ["test", "--features", "tests", "${@}", "--", "--nocapture"]

[tasks.rust-tests-filter]
dependencies = ["store-version", "copy-capnp"]
command = "cargo"
cwd = "console_backend"
args = ['test', '--package', 'console-backend', '--lib', '--all-features', '--', '${RUST_TEST_FILTER}', '--exact', '--nocapture']

[tasks.rust-type-check]
dependencies = ["store-version", "copy-capnp"]
command = "cargo"
args = ["check"]

[tasks.watch-entrypoint]
dependencies = ["store-version", "copy-capnp"]
command = "cargo"
args = [
  "watch",
  "--exec",
  "check --bin swift-console --features=entrypoint,splash",
]

[tasks.watch-windowpos]
dependencies = ["store-version", "copy-capnp"]
command = "cargo"
args = ["watch", "--exec", "check --bin windowpos --features=winit"]

[tasks.python-type-check]
dependencies = ["set-python-files"]
command = "${PYTHON}"
args = ["-m", "mypy", "@@split(PYTHON_FILES, )"]

[tasks.python-format-check]
dependencies = ["set-python-files"]
command = "${PYTHON}"
args = ["-m", "black", "--check", "--diff", "@@split(PYTHON_FILES, )"]

[tasks.python-format-all]
dependencies = ["set-python-files"]
command = "${PYTHON}"
args = ["-m", "black", "@@split(PYTHON_FILES, )"]

[tasks.python-format]
alias = "python-format-all"

[tasks.python-lint]
dependencies = ["set-python-files"]
command = "${PYTHON}"
args = ["-m", "pylint", "--output-format=parseable", "@@split(PYTHON_FILES, )"]

[tasks.format-toml]
description = "Formats all toml files defined in the CARGO_MAKE_FORMAT_TOML_FILES environment variable."
category = "Development"
condition = { env_set = ["CARGO_MAKE_FORMAT_TOML_FILES"] }
install_crate = { crate_name = "taplo-cli", binary = "taplo", version = "0.6.0", test_arg = [
  "--help",
] }
command = "taplo"
args = ["format", "${CARGO_MAKE_FORMAT_TOML_FILES}"]

[tasks.toml-format-check]
# Note format-toml task is defined by cargo-make to use crate taplo-cli, but the version is
# unspecified.  Task cargo-make-deps-update keeps the dev version in sync with CI.
# https://github.com/sagiegurari/cargo-make/issues/571
dependencies = ["cargo-make-deps-update", "format-toml"]
run_task = "check-git-diff"

[tasks.format-all]
run_task = [
  { name = [
    "python-format-all",
    "qml-format",
    "rust-format",
    "newline-format",
    "format-toml",
  ] },
]

[tasks.format]
alias = "format-all"

[tasks.format-check]
dependencies = [
  "python-format-check",
  "rust-format-check",
  "newline-check",
  "qml-format-check",
  "toml-format-check",
]
run_task = "check-git-diff"

[tasks.lint]
dependencies = ["qml-lint", "python-lint", "rust-lint", "format-check"]

[tasks.types]
dependencies = ["python-type-check", "rust-type-check"]

[tasks.check-all]
dependencies = [
  "cargo-make-deps-update",
  "generate-common-constants-rs",
  "extract-piksi-constants-rs",
  "format",
  "lint",
  "types",
]
run_task = "check-git-diff"

[tasks.tests]
dependencies = ["rust-tests"]

# Create 'test' alias
[tasks.test]
clear = true
run_task = "tests"

[tasks.backend-cpu-bench]
dependencies = ["copy-capnp", "generate-resources"]
command = "cargo"
args = ["bench", "--all-features", "--", "--verbose", "--noplot"]

[tasks.backend-cpu-bench-validate]
command = "${PYTHON}"
args = ["utils/bench_runner.py", "--backend_cpu"]

[tasks.backend-mem-bench]
dependencies = ["copy-capnp", "generate-resources"]
command = "cargo"
args = [
  "test",
  "test_run_process_messages",
  "--manifest-path=console_backend/Cargo.toml",
  "--features",
  "benches",
  "--",
  "--nocapture",
]

[tasks.backend-benches]
dependencies = [
  "store-version",
  "backend-cpu-bench",
  "backend-cpu-bench-validate",
  "backend-mem-bench",
]

[tasks.disk-usage-bench]
command = "${PYTHON}"
args = ["utils/bench_runner.py", "--disk_usage"]

[tasks.frontend-cpu-bench.linux]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=${WORKSPACE}/py39-dist/${APP_NAME}
'''

[tasks.frontend-cpu-bench.windows]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=${WORKSPACE}/py39-dist/${APP_NAME}.exe
'''

[tasks.frontend-cpu-bench.mac]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=${WORKSPACE}/py39-dist/${APP_NAME}
'''

[tasks.frontend-mem-bench.linux]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=${WORKSPACE}/py39-dist/${APP_NAME}
'''

[tasks.frontend-mem-bench.windows]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=${WORKSPACE}/py39-dist/${APP_NAME}.exe
'''

[tasks.frontend-mem-bench.mac]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=${WORKSPACE}/py39-dist/${APP_NAME}
'''

[tasks.newline-terminator]
env = { EXCLUSION_PATTERNS = [".png", "docs", "resources/images"] }
private = true
script_runner = "python"
script_extension = "py"
script = '''
import os
import re
import sys
import subprocess
def raises_exc(func):
    try: func()
    except: return True
    return False
dry_run = os.environ.get("NLT_DRY_RUN", "") == "1"
open_append = lambda fn: open(fn, "ta")
open_read = lambda fn: open(fn, "rb")
seek_end = lambda fp: (fp.seek(-1, 2), fp)[-1]
has_newline = lambda fn: seek_end(open_read(fn)).read(1) == b"\n"
append_newline = lambda fn: (open_append(fn).write("\n") if not dry_run else None, fn)[-1]
try_open_text = lambda fn: lambda: (open(fn, "ta"), open(fn, "tr").read(4096))
valid_file = lambda fn: os.path.getsize(fn) > 0 and not raises_exc(try_open_text(fn))
no_trailing_lf = lambda fn: valid_file(fn) and not has_newline(fn)
all_files = subprocess.check_output(["git", "ls-files"]).decode('utf8').splitlines()
exclusion_substrings = os.environ.get("EXCLUSION_PATTERNS")
exclusion_substrings = exclusion_substrings.split(";")
all_files = [x for x in all_files if not any([re.match(".*"+y, x) for y in exclusion_substrings])]
no_newline = list(map(append_newline, filter(no_trailing_lf, all_files)))
footer = "*********************************************\n"
err = "ERROR: " if dry_run else "Fixing "
header = footer + "*** " + err + "files missing trailing newline ***\n" + footer
sys.stderr.write(header + str.join("\n", no_newline) + "\n" + footer) \
  if no_newline else None
sys.exit(int(len(no_newline) > 0) if dry_run else 0)
'''

[tasks.newline-check]
env = { NLT_DRY_RUN = "1" }
run_task = "newline-terminator"

[tasks.newline-format]
run_task = "newline-terminator"

[tasks.check-git-diff]
command = "git"
args = ["diff", "--exit-code"]
