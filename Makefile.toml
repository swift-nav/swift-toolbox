env_scripts = [
# Two proposed methods of simplifying path globbing
# https://github.com/sagiegurari/cargo-make/issues/542
# https://github.com/sagiegurari/cargo-make/issues/543
'''
#!@duckscript
!include_files ./utils/glob.ds

py_files = glob_paths_excluding_target ./**/*.py

set_env PYTHON_FILES ${py_files}
echo PYTHON_FILES=${py_files}

qml_files = glob_paths_excluding_target resources/**/*.qml

set_env QML_FILES ${qml_files}
echo QML_FILES=${qml_files}
''']

[env]
CONDA_ENV = "console_pp"
REQUIREMENTS_FILE = "requirements.txt"
REQUIREMENTS_DEV_FILE = "requirements-dev.txt"

[config]
default_to_workspace = false
init_task = "init"

[tasks.init]

[tasks.poetry-export-dev]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV poetry export --dev -f $REQUIREMENTS_FILE --output $REQUIREMENTS_DEV_FILE --without-hashes
'''

[tasks.poetry-export]
dependencies = ["poetry-export-dev"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV poetry export -f $REQUIREMENTS_FILE --output $REQUIREMENTS_FILE --without-hashes
'''

[tasks.pip-install-dev]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pip install -r $REQUIREMENTS_DEV_FILE
'''

[tasks.pip-install]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pip install -r $REQUIREMENTS_FILE
'''

[tasks.generate-common-constants]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV --no-capture-output --live-stream py2many --rust=1 src/main/python/constants.py
mv src/main/python/constants.rs console_backend/src/common_constants.rs
'''

[tasks.generate-resources]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV --no-capture-output --live-stream pyside2-rcc resources/console_resources.qrc -o src/main/python/console_resources.py
'''

[tasks.copy-capnp]
script_runner = "@shell"
script = '''
cp src/main/resources/base/console_backend.capnp console_backend/console_backend.capnp
'''

[tasks.remove-egg-dist]
script_runner = "@shell"
script = '''
rm -rf console_backend/*.dist-info
rm -rf console_backend/*.egg-info
'''

[tasks.remove-egg-dist.windows]
script_runner = "powershell"
script_extension = "ps1"
script = '''
Get-ChildItem .\console_backend -Recurse -Include @("*.egg-info", "*.dist-info") | Remove-Item -Force -Recurse
'''

[tasks.run]
dependencies = ["copy-capnp", "generate-resources", "remove-egg-dist", "install-backend"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV --no-capture-output --live-stream fbs run
'''

[tasks.prod-run]
dependencies = ["copy-capnp", "generate-resources", "remove-egg-dist", "prod-install-backend"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV --no-capture-output --live-stream fbs run
'''

[tasks.setuptools-rust]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python -m pip install setuptools-rust==0.11.6
'''

[tasks.install-backend]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pip install -e ./console_backend
'''

[tasks.prod-install-backend]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV --no-capture-output --live-stream python -m pip install ./console_backend --upgrade --force ./console_backend -v
'''

[tasks.prod-freeze-no-copy]
dependencies = ["copy-capnp", "generate-resources", "setuptools-rust", "prod-install-backend"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV fbs freeze
'''

[tasks.copy-console-backend-to-fbs.windows]
script_runner = "powershell"
script_extension = "ps1"
script = '''
xcopy /E /Y /I .\console_backend\console_backend\server.cp38-win_amd64.pyd .\target\swift_navigation_console\console_backend\
'''

[tasks.copy-console-backend-to-fbs]
script_runner = "@shell"
script = '''
mkdir -p target/swift_navigation_console/console_backend && cp -r console_backend/console_backend/* target/swift_navigation_console/console_backend/.
'''

[tasks.prod-freeze]
dependencies = ["prod-freeze-no-copy", "remove-negligibles", "copy-console-backend-to-fbs"]

[tasks.prod-installer]
dependencies = ["prod-freeze"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV fbs installer
'''

[tasks.create-remove-negligibles-file]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python utils/get_fbs_remove_list.py
'''

[tasks.remove-negligibles.linux]
dependencies = []
script = '''
bash src/main/fbs/linux-remove-negligibles.sh
'''

[tasks.remove-negligibles.windows]
dependencies = []
script = '''
bash src/main/fbs/windows-remove-negligibles.sh
'''

[tasks.prod-nuitka-build.linux]
dependencies = ["copy-capnp", "generate-resources"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pip install --force ./console_backend
conda run -n $CONDA_ENV bash src/main/nuitka/linux.sh
'''

[tasks.prod-nuitka-build.mac]
dependencies = ["copy-capnp", "generate-resources"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pip install --force ./console_backend
conda run -n $CONDA_ENV bash src/main/nuitka/mac.sh
'''

[tasks.create-nuitka-script]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python utils/create_nuitka_script.py
'''

[tasks.prod-installer.mac]
dependencies = ["prod-nuitka-build"]
script_runner = "@shell"
script = '''
mkdir -p main.app/Contents/MacOS main.app/Contents/Resources
cp -r main.dist/* main.app/Contents/MacOS/
iconutil --convert icns src/main/icons/Mac.iconset
mv src/main/icons/Mac.icns main.app/Contents/Resources/SwiftNavConsole.icns
conda run -n $CONDA_ENV python src/build/generate-mac-info-plist.py
hdiutil create -volname SwiftNavConsole -srcfolder main.app -ov -format UDZO 'swift_navigation_console.dmg'
'''

[tasks.qml-format.linux]
env = { QT_APP = { script = ["conda run -n $CONDA_ENV python utils/echo-qt-dir.py"] } }
script_runner = "@shell"
script = '''
${QT_APP}/Qt/bin/qmlformat -i $QML_FILES
'''

[tasks.qml-format-check.linux]
dependencies = ["qml-format"]
script_runner = "@shell"
script = '''
git diff --exit-code -- $QML_FILES
'''

[tasks.rust-format]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["fmt", "--all"]

[tasks.rust-format-check]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["fmt", "--", "--check"]

[tasks.rust-lint]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["clippy", "--all-targets", "--", "--deny", "warnings"]

[tasks.rust-tests]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["test", "--", "--nocapture"]

[tasks.rust-type-check]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["check"]

[tasks.python-type-check]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV mypy $PYTHON_FILES
'''

[tasks.python-format-check]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV black --check --diff $PYTHON_FILES
'''

[tasks.python-format-all]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV black $PYTHON_FILES
'''

[tasks.python-format]
alias="python-format-all"

[tasks.python-lint]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pylint --output-format=parseable $PYTHON_FILES
'''

[tasks.format-all]
dependencies = ["python-format-all", "qml-format", "rust-format", "newline-format"]

[tasks.format]
alias = "format-all"

[tasks.format-check]
dependencies = ["python-format-check", "qml-format-check", "rust-format-check", "newline-check"]

[tasks.lint]
dependencies = ["python-lint", "rust-lint", "format-check"]

[tasks.types]
dependencies = ["python-type-check", "rust-type-check"]

[tasks.tests]
dependencies = ["rust-tests"]

[tasks.backend-cpu-bench]
dependencies = ["copy-capnp", "generate-resources"]
command = "cargo"
args    = ["bench", "--all-features", "--", "--verbose", "--noplot"]

[tasks.backend-cpu-bench-validate]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python utils/bench_runner.py --backend_cpu
'''

[tasks.backend-mem-bench]
dependencies = ["copy-capnp", "generate-resources"]
command = "cargo"
args    = ["test", "test_run_process_messages", "--manifest-path=console_backend/Cargo.toml", "--features", "benches", "--", "--nocapture"]

[tasks.backend-benches]
dependencies = ["backend-cpu-bench", "backend-cpu-bench-validate", "backend-mem-bench"]

[tasks.disk-usage-bench]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python utils/bench_runner.py --disk_usage
'''

[tasks.frontend-cpu-bench.linux]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=../../target/swift_navigation_console/swift_navigation_console && cd -
'''

[tasks.frontend-cpu-bench.windows]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=../../target/swift_navigation_console/swift_navigation_console.exe && cd -
'''

[tasks.frontend-cpu-bench.mac]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=../../main.dist/main && cd -
'''

[tasks.frontend-mem-bench.linux]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=../../target/swift_navigation_console/swift_navigation_console && cd -
'''

[tasks.frontend-mem-bench.windows]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=../../target/swift_navigation_console/swift_navigation_console.exe && cd -
'''

[tasks.frontend-mem-bench.mac]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=../../main.dist/main && cd -
'''

[tasks.newline-terminator]
private = true
script_runner = "python"
script_extension = "py"
script = '''
import os
import sys
import subprocess
def raises_exc(func):
    try: func()
    except: return True
    return False
dry_run = os.environ.get("NLT_DRY_RUN", "") == "1"
open_append = lambda fn: open(fn, "ta")
open_read = lambda fn: open(fn, "rb")
seek_end = lambda fp: (fp.seek(-1, 2), fp)[-1]
has_newline = lambda fn: seek_end(open_read(fn)).read(1) == b"\n"
append_newline = lambda fn: (open_append(fn).write("\n") if not dry_run else None, fn)[-1]
try_open_text = lambda fn: lambda: (open(fn, "ta"), open(fn, "tr").read(4096))
valid_file = lambda fn: os.path.getsize(fn) > 0 and not raises_exc(try_open_text(fn))
no_trailing_lf = lambda fn: valid_file(fn) and not has_newline(fn)
all_files = subprocess.check_output(["git", "ls-files"]).decode('utf8').splitlines()
no_newline = list(map(append_newline, filter(no_trailing_lf, all_files)))
footer = "*********************************************\n"
err = "ERROR: " if dry_run else "Fixing "
header = footer + "*** " + err + "files missing trailing newline ***\n" + footer
sys.stderr.write(header + str.join("\n", no_newline) + "\n" + footer) \
  if no_newline else None
sys.exit(int(len(no_newline) > 0) if dry_run else 0)
'''

[tasks.newline-check]
env = { "NLT_DRY_RUN" = "1" }
run_task = "newline-terminator"

[tasks.newline-format]
run_task = "newline-terminator"
