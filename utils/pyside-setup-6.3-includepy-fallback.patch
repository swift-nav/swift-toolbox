From bd7b811ed1a5c53b493016847165844ce595f53e Mon Sep 17 00:00:00 2001
From: Keith Kyzivat <keith.kyzivat@qt.io>
Date: Wed, 21 Dec 2022 09:07:34 -0500
Subject: [PATCH] Properly fall back if INCLUDEPY config_var !exist

if get_config_var("INCLUDEPY") is a path that does not exist, properly
fall back to using os.path.join(py_prefix, "include"). py_prefix itself
may have a fallback to sys.prefix if get_config_var("prefix") is a path
that doesn't exist.
---
 build_scripts/build_info_collector.py | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/build_scripts/build_info_collector.py b/build_scripts/build_info_collector.py
index ab0f6b0d3..3665310da 100644
--- a/build_scripts/build_info_collector.py
+++ b/build_scripts/build_info_collector.py
@@ -90,10 +90,10 @@ def _get_py_library_win(build_type, py_version, py_prefix, py_libdir,
     dbg_postfix = "_d" if build_type == "Debug" else ""
     if OPTION["MAKESPEC"] == "mingw":
         static_lib_name = f"libpython{py_version.replace('.', '')}{dbg_postfix}.a"
-        return os.path.join(py_libdir, static_lib_name)
+        return (os.path.join(py_libdir, static_lib_name), py_include_dir)
     v = py_version.replace(".", "")
     python_lib_name = f"python{v}{dbg_postfix}.lib"
-    return os.path.join(py_libdir, python_lib_name)
+    return (os.path.join(py_libdir, python_lib_name), py_include_dir)
 
 
 def _get_py_library_unix(build_type, py_version, py_prefix, py_libdir,
@@ -119,7 +119,7 @@ def _get_py_library_unix(build_type, py_version, py_prefix, py_libdir,
         lib_name = f"libpython{py_version}{lib_suff}{lib_ext}"
         py_library = os.path.join(py_libdir, lib_name)
         if os.path.exists(py_library):
-            return py_library
+            return (py_library, py_include_dir)
         libs_tried.append(py_library)
 
     # Try to find shared libraries which have a multi arch
@@ -132,7 +132,7 @@ def _get_py_library_unix(build_type, py_version, py_prefix, py_libdir,
             lib_name = f"libpython{py_version}{lib_suff}{lib_ext}"
             py_library = os.path.join(try_py_libdir, lib_name)
             if os.path.exists(py_library):
-                return py_library
+                return (py_library, py_include_dir)
             libs_tried.append(py_library)
 
     # PYSIDE-535: See if this is PyPy.
@@ -144,7 +144,7 @@ def _get_py_library_unix(build_type, py_version, py_prefix, py_libdir,
             lib_name = f"libpypy{version_quirk}-c{lib_ext}"
             pypy_library = os.path.join(pypy_libdir, lib_name)
             if os.path.exists(pypy_library):
-                return pypy_library
+                return (pypy_library, py_include_dir)
             libs_tried.append(pypy_library)
     _libs_tried = ', '.join(libs_tried)
     raise DistutilsSetupError(f"Failed to locate the Python library with {_libs_tried}")
@@ -153,15 +153,15 @@ def _get_py_library_unix(build_type, py_version, py_prefix, py_libdir,
 def get_py_library(build_type, py_version, py_prefix, py_libdir, py_include_dir):
     """Find the Python library"""
     if sys.platform == "win32":
-        py_library = _get_py_library_win(build_type, py_version, py_prefix,
-                                         py_libdir, py_include_dir)
+        (py_library, py_include_dir) = _get_py_library_win(build_type,
+            py_version, py_prefix, py_libdir, py_include_dir)
     else:
-        py_library = _get_py_library_unix(build_type, py_version, py_prefix,
-                                          py_libdir, py_include_dir)
+        (py_library, py_include_dir) = _get_py_library_unix(build_type,
+            py_version, py_prefix, py_libdir, py_include_dir)
     if py_library.endswith('.a'):
         # Python was compiled as a static library
         log.error(f"Failed to locate a dynamic Python library, using {py_library}")
-    return py_library
+    return (py_library, py_include_dir)
 
 
 class BuildInfoCollectorMixin(object):
@@ -322,8 +322,8 @@ class BuildInfoCollectorMixin(object):
         self.py_include_dir = py_include_dir
 
         if not self.is_cross_compile:
-            self.py_library = get_py_library(build_type, py_version, py_prefix,
-                                             py_libdir, py_include_dir)
+            (self.py_library, self.py_include_dir) = get_py_library(
+                build_type, py_version, py_prefix, py_libdir, py_include_dir)
         self.py_version = py_version
         self.build_type = build_type
 
-- 
2.37.3

