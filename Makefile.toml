[env]
PYTHON_FILES = { script = ["python utils/glob_python_files.py"] }
CONDA_ENV = "console_pp"

[config]
default_to_workspace = false

[tasks.poetry-install]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV poetry shell
conda run -n $CONDA_ENV poetry install -vvv
'''

[tasks.generate-resources]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pyside2-rcc resources/console_resources.qrc -o src/main/python/console_resources.py
'''

[tasks.copy-capnp]
script_runner = "@shell"
script = '''
cp src/main/resources/base/console_backend.capnp console_backend/console_backend.capnp
'''

[tasks.run]
dependencies = ["copy-capnp", "generate-resources"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pip install -e ./console_backend
conda run -n $CONDA_ENV fbs run
'''

[tasks.prod-run]
dependencies = ["copy-capnp", "generate-resources", "prod-install-backend"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV fbs run
'''

[tasks.setuptools-rust]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python -m pip install setuptools-rust==0.11.6
'''

[tasks.prod-install-backend]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python -m pip install -t ./console_backend --upgrade --force ./console_backend -v
'''

[tasks.prod-freeze-no-copy]
dependencies = ["copy-capnp", "generate-resources", "setuptools-rust", "prod-install-backend"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV fbs freeze
'''

[tasks.copy-console-backend-to-fbs]
script_runner = "@shell"
script = '''
mkdir target/swift_navigation_console/console_backend
cp -r console_backend/console_backend/*  target/swift_navigation_console/console_backend/.
'''

[tasks.copy-console-backend-to-fbs.mac]
script_runner = "@shell"
script = '''
'''

[tasks.prod-freeze]
dependencies = ["prod-freeze-no-copy", "remove-negligibles", "copy-console-backend-to-fbs"]

[tasks.prod-installer]
dependencies = ["prod-freeze"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV fbs installer
'''

[tasks.create-remove-negligibles-file]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python utils/get_fbs_remove_list.py
'''

[tasks.remove-negligibles.linux]
dependencies = []
script = '''
bash src/main/fbs/linux-remove-negligibles.sh
'''

[tasks.remove-negligibles.windows]
dependencies = []
script = '''
bash src/main/fbs/windows-remove-negligibles.sh
'''

[tasks.prod-nuitka-build.linux]
dependencies = ["copy-capnp", "generate-resources"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pip install --force ./console_backend
conda run -n $CONDA_ENV bash src/main/nuitka/linux.sh
'''

[tasks.prod-nuitka-build.mac]
dependencies = ["copy-capnp", "generate-resources"]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pip install --force ./console_backend
conda run -n $CONDA_ENV bash src/main/nuitka/mac.sh
'''

[tasks.create-nuitka-script]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python utils/create_nuitka_script.py
'''

[tasks.prod-installer.mac]
dependencies = ["prod-nuitka-build"]
script_runner = "@shell"
script = '''
mkdir -p main.app/Contents/MacOS
cp -r main.dist/* main.app/Contents/MacOS/.
hdiutil create -volname SwiftNavConsole -srcfolder main.app -ov -format UDZO 'swift_navigation_console.dmg'
'''

[tasks.rust-format]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["fmt", "--all"]

[tasks.rust-format-check]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["fmt", "--", "--check"]

[tasks.rust-lint]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["clippy", "--all-targets", "--", "--deny", "warnings"]

[tasks.rust-tests]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["test", "--", "--nocapture"]

[tasks.rust-type-check]
dependencies = ["copy-capnp"]
command = "cargo"
args    = ["check"]

[tasks.python-type-check]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV mypy $PYTHON_FILES
'''

[tasks.python-format-check]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV black --line-length=120 --check --diff $PYTHON_FILES
'''

[tasks.python-format-all]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV black --line-length=120 $PYTHON_FILES
'''

[tasks.python-format]
alias="python-format-all"

[tasks.python-lint]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV pylint --output-format=parseable $PYTHON_FILES
'''

[tasks.format-all]
dependencies = ["python-format-all", "rust-format"]

[tasks.format]
alias = "format-all"

[tasks.format-check]
dependencies = ["python-format-check", "rust-format-check"]

[tasks.lint]
dependencies = ["python-lint", "rust-lint"]

[tasks.types]
dependencies = ["python-type-check", "rust-type-check"]

[tasks.tests]
dependencies = ["rust-tests"]

[tasks.backend-cpu-bench]
dependencies = ["copy-capnp", "generate-resources"]
command = "cargo"
args    = ["bench", "--all-features", "--", "--verbose", "--noplot"]

[tasks.backend-cpu-bench-validate]
script_runner = "@shell"
script = '''

conda run -n $CONDA_ENV python -m pip list && conda run -n $CONDA_ENV python utils/bench_runner.py --backend_cpu
'''

[tasks.backend-mem-bench]
dependencies = ["copy-capnp", "generate-resources"]
command = "cargo"
args    = ["test", "test_run_process_messages", "--manifest-path=console_backend/Cargo.toml", "--features", "benches", "--", "--nocapture"]

[tasks.backend-benches]
dependencies = ["backend-cpu-bench", "backend-cpu-bench-validate", "backend-mem-bench"]

[tasks.disk-usage-bench]
script_runner = "@shell"
script = '''
conda run -n $CONDA_ENV python utils/bench_runner.py --disk_usage
'''

[tasks.frontend-cpu-bench.linux]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=../../target/swift_navigation_console/swift_navigation_console && cd -
'''

[tasks.frontend-cpu-bench.windows]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=../../target/swift_navigation_console/swift_navigation_console.exe && cd -
'''

[tasks.frontend-cpu-bench.mac]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=../../main.dist/main && cd -
'''

[tasks.frontend-mem-bench.linux]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=../../target/swift_navigation_console/swift_navigation_console && cd -
'''

[tasks.frontend-mem-bench.windows]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=../../target/swift_navigation_console/swift_navigation_console.exe && cd -
'''

[tasks.frontend-mem-bench.mac]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=../../main.dist/main && cd -
'''
