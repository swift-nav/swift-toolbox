name: main

on:
  push:
    branches:
      - 'main'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

env:
  PIP_CACHE_DIR: ~/.cache/pip
  RUST_CACHE_DIRS: "~/.cargo/registry\n~/.cargo/git\ntarget\n"
  LIBCLANG_PATH_WIN: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/Llvm/x64/bin"
  CODE_SIGNER_PATH_WIN: "%win10sdk%/x64/signtool.exe"
  CARGO_MAKE_VERSION: 0.35.10
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C debuginfo=0"
  APP_NAME: swift-console
  APP_BUNDLE_ID: com.swift-nav.SwiftConsole

jobs:

  backend_bench:

    name: Backend Benchmarks

    strategy:
      matrix:
        os:
        - ubuntu-18.04
        - macos-10.15
        - windows-2019

    runs-on: ${{ matrix.os }}

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run ssh-keyscan
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup SSH for Windows Git LFS
        run: |
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "ssh-keyscan github.com >> ~/.ssh/known_hosts"
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "echo '${{ secrets.SSH_KEY }}' >> ~/.ssh/id_rsa"
        if: matrix.os == 'windows-2019'

      - name: Install ${{ runner.os }} Dependencies.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update && sudo apt-get install -y capnproto libudev-dev
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install capnp llvm
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install -y capnproto
          fi

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ secrets.CACHE_VERSION }}

      - uses: davidB/rust-cargo-make@v1
        with:
          version: ${{ env.CARGO_MAKE_VERSION }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pyproject-toml-${{ secrets.CACHE_VERSION }}-${{ hashFiles('pyproject.toml') }}

      - name: Set up python builder
        shell: bash
        run: |
          cargo make setup-builder
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Backend Benchmarks (Windows)
        env:
          LIBCLANG_PATH: ${{ env.LIBCLANG_PATH_WIN }}
        run: |
          cargo make backend-benches
        if: matrix.os == 'windows-2019'

      - name: Run Backend Benchmarks
        run: |
          cargo make backend-benches
        if: matrix.os != 'windows-2019'

  checks:

    name: Code Quality Checks

    runs-on: ubuntu-18.04

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ secrets.CACHE_VERSION }}

      - uses: davidB/rust-cargo-make@v1
        with:
          version: ${{ env.CARGO_MAKE_VERSION }}

      - name: Install Dependencies.
        run: |
          sudo apt-get update && sudo apt-get install -y capnproto libudev-dev

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pyproject-toml-${{ secrets.CACHE_VERSION }}-${{ hashFiles('pyproject.toml') }}

      - name: Set up python builder
        shell: bash
        run: |
          cargo make setup-builder
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Checks
        run: |
          cargo make check-all

      - name: Run Tests
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: cargo make tests

  build:

    name: Build Binaries

    needs:
      - checks
      - backend_bench

    strategy:
      matrix:
        os:
        - {name: ubuntu-18.04, exe_suffix: "", short_name: "linux"}
        - {name: macos-10.15, exe_suffix: "", short_name: "macos"}
        - {name: windows-2019, exe_suffix: ".exe", short_name: "windows"}

    runs-on: ${{ matrix.os.name }}

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run ssh-keyscan
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup SSH for Windows Git LFS
        run: |
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "ssh-keyscan github.com >> ~/.ssh/known_hosts"
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "echo '${{ secrets.SSH_KEY }}' >> ~/.ssh/id_rsa"
        if: matrix.os.name == 'windows-2019'

      - name: Install ${{ runner.os }} Dependencies.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update
              sudo apt-get install -y \
                capnproto \
                libxcb-icccm4 \
                libxcb-image0 \
                libxcb-keysyms1 \
                libxcb-randr0 \
                libxcb-render-util0 \
                libxcb-render0 \
                libxcb-shape0 \
                libxcb-shm0 \
                libxcb-sync1 \
                libxcb-util1 \
                libxcb-xfixes0 \
                libxcb-xinerama0 \
                libxcb-xkb1 \
                libxkbcommon-x11-0 \
                ruby \
                ruby-dev \
                rubygems \
                build-essential \
                libudev-dev
              sudo gem install --no-document fpm
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install capnp llvm create-dmg
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install capnproto nsis
          fi

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ secrets.CACHE_VERSION }}

      - uses: davidB/rust-cargo-make@v1
        with:
          version: ${{ env.CARGO_MAKE_VERSION }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pyproject-toml-${{ secrets.CACHE_VERSION }}-${{ hashFiles('pyproject.toml') }}

      - name: Set up python builder
        shell: bash
        run: |
          cargo make setup-builder
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set env vars
        shell: bash
        run: |
          echo "LIBCLANG_PATH=$LIBCLANG_PATH_WIN" >>$GITHUB_ENV
        if: matrix.os.name == 'windows-2019'

      - name: Build ${{ runner.os }} Binaries.
        shell: bash
        run: |
          cargo make create-dist

      - name: Create ${{ runner.os }} Installers.
        shell: bash
        run: |
          cargo make dist-to-installer
          if [ "$RUNNER_OS" == "Linux" ]; then
              INSTALLER_ARCHIVE=$(find installers/Linux -maxdepth 1 -iname "*.deb")
          elif [ "$RUNNER_OS" == "Windows" ]; then
              INSTALLER_ARCHIVE=$(find installers/Windows -maxdepth 1 -iname "*.exe")
          elif [ "$RUNNER_OS" == "macOS" ]; then
              mv installers/macOS/*.dmg .
              INSTALLER_ARCHIVE=$(find . -maxdepth 1 -iname "*.dmg")
          fi
          echo $INSTALLER_ARCHIVE >installer-archive.filename
          echo "INSTALLER_ARCHIVE=$(cat installer-archive.filename)" >>$GITHUB_ENV
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags') && matrix.os.name != 'macos-10.15'

      - name: Build ${{ runner.os }} swift-files binary.
        run: |
          cargo build --release --bin swift-files --no-default-features --features env_logger,indicatif

      - name: Build ${{ runner.os }} swift-settings binary.
        run: |
          cargo build --release --bin swift-settings --no-default-features --features env_logger

      - name: Build ${{ runner.os }} swift-updater binary.
        run: |
          cargo build --release --bin swift-updater --no-default-features

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no
      - name: Archive ${{ runner.os }} Binaries.
        env:
          OS_NAME: ${{ runner.os }}
        shell: bash
        run: |
          mkdir bench
          cp -r console_backend/tests/data bench
          cp utils/bench_runner.py bench
          cd bench
          7z a -tzip "../$OS_NAME.zip" *;
          cd ..
          echo "${OS_NAME}.zip" >bench-archive.filename;
          echo "BENCH_ARCHIVE=$(cat bench-archive.filename)" >>$GITHUB_ENV
          RELEASE_ARCHIVE=$(find . -maxdepth 1 -iname "*.tar.xz" ! -iname "*-debug*")
          DEBUG_ARCHIVE=$(find . -maxdepth 1 -iname "*-debug.tar.xz")
          echo $RELEASE_ARCHIVE >release-archive.filename
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
          echo $DEBUG_ARCHIVE >debug-archive.filename
          echo "DEBUG_ARCHIVE=$(cat debug-archive.filename)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename
      - uses: actions/upload-artifact@v2
        with:
          name: swift-files_${{ matrix.os.short_name }}
          path: ./target/release/swift-files${{ matrix.os.exe_suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: swift-settings_${{ matrix.os.short_name }}
          path: ./target/release/swift-settings${{ matrix.os.exe_suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: swift-updater_${{ matrix.os.short_name }}
          path: ./target/release/swift-updater${{ matrix.os.exe_suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-installer
          path: |
            ${{ env.INSTALLER_ARCHIVE }}
            installer-archive.filename
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags') && matrix.os.name != 'macos-10.15'
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts-debug
          path: |
            ${{ env.DEBUG_ARCHIVE }}
            debug-archive.filename
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts-bench
          path: |
            ${{ env.BENCH_ARCHIVE }}
            bench-archive.filename
      - name: ${{ runner.os }} Installer Size Benchmark.
        env:
          OS_NAME: ${{ runner.os }}
        shell: bash
        run: |
          cargo make disk-usage-bench

  sign_application:
    name: Sign Application
    timeout-minutes: 30
    needs:
      - build
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    strategy:
      matrix:
        os:
          - macOS
    runs-on: [self-hosted, '${{ matrix.os }}', code-signer]
    steps:

      - name: Remove previous build.
        shell: bash
        continue-on-error: true
        run: |
          rm -rf application

      - name: Checkout source.
        uses: actions/checkout@v2
        with:
          path: application

      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            application

      - name: Unzip release artifact.
        shell: bash
        run: |
          cd application
          mkdir -p py39-dist
          tar -xvf "$(cat release-archive.filename)" -C py39-dist

      - name: Build .app bundle.
        shell: bash
        run: |
          cd application
          cargo make dist-to-installer-app

      - name: Sign application.
        shell: bash
        run: |
          cd "application/target/installer/Swift Console.app"
          for f in $(find Contents/Resources/lib/ -name '*.dylib' -or -name '*.so')
          do
            codesign \
            -s "${{ secrets.APPLE_DEVELOPER_ID }}" \
            --timestamp \
            "$f"
          done

          for f in $(ls Contents/Resources/lib/python3.9/site-packages/PySide2/Qt/lib/*.framework/Versions/5/*)
          do
            codesign \
              -s "${{ secrets.APPLE_DEVELOPER_ID }}" \
              --timestamp \
              "$f"
          done

          cd ../../../
          codesign \
            -s "${{ secrets.APPLE_DEVELOPER_ID }}" --deep \
            --entitlements installers/macOS/entitlements.plist \
            --timestamp \
            --options=runtime \
            "target/installer/Swift Console.app"

      - name: Build dmg file.
        shell: bash
        run: |
          cd application
          cargo make store-version
          cargo make dist-to-installer-dmg

      - name: Add archive to path.
        shell: bash
        run: |
          INSTALLER_ARCHIVE=$(find application -iname "*.dmg")
          echo $INSTALLER_ARCHIVE >installer-archive.filename
          echo "INSTALLER_ARCHIVE=$(cat installer-archive.filename)" >>$GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-installer
          path: |
            ${{ env.INSTALLER_ARCHIVE }}
            installer-archive.filename

  frontend_bench:
    name: Run Frontend Benchmarks
    timeout-minutes: 30
    needs:
      - build
    strategy:
      matrix:
        os:
          - macOS
          - Windows
          - Linux
    runs-on: [self-hosted, '${{ matrix.os }}', bench]
    steps:
      - name: Remove previous build.
        shell: bash
        run: |
          rm -rf ${{ env.APP_NAME }}
          rm -rf bench

      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            ${{ env.APP_NAME }}

      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}-artifacts-bench
          path: |
            bench

      - name: Extract binary and data.
        shell: bash
        run: |
          cd ${{ env.APP_NAME }}
          archive=$(cat release-archive.filename)
          7z x $archive -aoa
          7z x ${archive%.xz} -aoa
          echo "extracted release-archive"
          mv ../bench/${{ matrix.os }}.zip .
          7z x ${{ matrix.os }}.zip -aoa
          echo "extracted bench data"

      - name: Run CPU Frontend Benchmark.
        uses: nick-invision/retry@v2
        with:
          shell: bash
          timeout_minutes: 3
          max_attempts: 3
          retry_on: error
          command: |
            cd ${{ env.APP_NAME }}
            if [ "$RUNNER_OS" == "Windows" ]; then
                python ./bench_runner.py --frontend_cpu --executable="${GITHUB_WORKSPACE}/${{ env.APP_NAME }}/${{ env.APP_NAME }}.exe"
            elif [ "$RUNNER_OS" == "macOS" ] || [ "$RUNNER_OS" == "Linux" ]; then
                chmod +x "${GITHUB_WORKSPACE}/${{ env.APP_NAME }}/${{ env.APP_NAME }}"
                python ./bench_runner.py --frontend_cpu --executable="${GITHUB_WORKSPACE}/${{ env.APP_NAME }}/${{ env.APP_NAME }}"
            else
                echo "Invalid platform"
                exit 1
            fi

      - name: Run MEM Frontend Benchmark.
        uses: nick-invision/retry@v2
        with:
          shell: bash
          timeout_minutes: 3
          max_attempts: 3
          retry_on: error
          command: |
            cd ${{ env.APP_NAME }}
            if [ "$RUNNER_OS" == "Windows" ]; then
                python ./bench_runner.py --frontend_mem --executable="${GITHUB_WORKSPACE}/${{ env.APP_NAME }}/${{ env.APP_NAME }}.exe"
            elif [ "$RUNNER_OS" == "macOS" ] || [ "$RUNNER_OS" == "Linux" ]; then
                chmod +x "${GITHUB_WORKSPACE}/${{ env.APP_NAME }}/${{ env.APP_NAME }}"
                python ./bench_runner.py --frontend_mem --executable="${GITHUB_WORKSPACE}/${{ env.APP_NAME }}/${{ env.APP_NAME }}"
            else
                echo "Invalid platform"
                exit 1
            fi

  sign_installer:
    name: Sign Installers
    timeout-minutes: 30
    needs:
      - sign_application
      - frontend_bench
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    strategy:
      matrix:
        os:
          - Windows
          - macOS
    runs-on: [self-hosted, '${{ matrix.os }}', code-signer]
    steps:

      - name: Remove previous build.
        shell: bash
        continue-on-error: true
        run: |
          rm -rf installer

      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}-installer
          path: |
            installer

      - name: Sign Installer.
        shell: cmd
        run: |
          cd installer
          set /p executable=<installer-archive.filename
          "${{ env.CODE_SIGNER_PATH_WIN }}" sign ^
            /debug /v ^
            /n "Swift Navigation, Inc." /a ^
            /tr http://rfc3161timestamp.globalsign.com/advanced ^
            /td SHA256 %executable%
        if: matrix.os == 'Windows'

      - name: Sign Installer.
        shell: bash
        run: |
          cd installer
          codesign \
            -s "${{ secrets.APPLE_DEVELOPER_ID }}" \
            -f --timestamp \
            $(cat installer-archive.filename)
          xcrun altool \
            --notarize-app \
            --file $(cat installer-archive.filename) \
            --primary-bundle-id ${{ env.APP_BUNDLE_ID }} \
            --apiKey ${{ secrets.APPLE_KEY_ID }} \
            --apiIssuer ${{ secrets.APPLE_ISSUER_ID }}
        if: matrix.os == 'macOS'

      - name: Add archive to path.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              INSTALLER_ARCHIVE=$(find installer -iname "*.deb")
          elif [ "$RUNNER_OS" == "Windows" ]; then
              INSTALLER_ARCHIVE=$(ls installer/installers/Windows/*.exe)
          elif [ "$RUNNER_OS" == "macOS" ]; then
              INSTALLER_ARCHIVE=$(find installer -iname "*.dmg")
          fi
          echo $INSTALLER_ARCHIVE >installer-archive.filename
          echo "INSTALLER_ARCHIVE=$(cat installer-archive.filename)" >>$GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-installer-signed
          path: |
            ${{ env.INSTALLER_ARCHIVE }}
            installer-archive.filename

  sign_binaries:
    name: Sign Binaries
    timeout-minutes: 30
    needs:
      - build
      - frontend_bench
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    strategy:
      matrix:
        os:
          - {name: macOS, exe_suffix: "", short_name: "macos", upload_suffix: ".zip"}
          - {name: Windows, exe_suffix: ".exe", short_name: "windows", upload_suffix: ".exe"}
          - {name: Linux, exe_suffix: "", short_name: "linux", upload_suffix: ".zip"}
        type:
          - "files"
          - "settings"
          - "updater"
    runs-on: [self-hosted, '${{ matrix.os.name }}', code-signer]
    steps:
      - name: Store git tag vars.
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Remove previous build.
        shell: bash
        continue-on-error: true
        run: |
          rm -rf binaries

      - uses: actions/download-artifact@v2
        with:
          name: swift-${{ matrix.type }}_${{ matrix.os.short_name }}
          path: |
            binaries

      - name: Add version to binary names.
        shell: bash
        working-directory: binaries
        run: |
          mv swift-${{ matrix.type }}${{ matrix.os.exe_suffix }} swift-${{ matrix.type }}_${{ env.VERSION }}_${{ matrix.os.short_name }}${{ matrix.os.exe_suffix }}

      - name: Sign Binaries.
        shell: cmd
        run: |
          "${{ env.CODE_SIGNER_PATH_WIN }}" sign ^
            /debug /v ^
            /n "Swift Navigation, Inc." /a ^
            /tr http://rfc3161timestamp.globalsign.com/advanced ^
            /td SHA256 binaries/swift-${{ matrix.type }}_${{ env.VERSION }}_${{ matrix.os.short_name }}${{ matrix.os.exe_suffix }}
          mv binaries/swift-${{ matrix.type }}_${{ env.VERSION }}_${{ matrix.os.short_name }}${{ matrix.os.exe_suffix }} .
        if: matrix.os.name == 'Windows'

      - name: Sign Binaries.
        shell: bash
        working-directory: binaries
        run: |
          codesign \
            -s "${{ secrets.APPLE_DEVELOPER_ID }}" \
            --timestamp \
            --options=runtime \
            swift-${{ matrix.type }}_${{ env.VERSION }}_${{ matrix.os.short_name }}${{ matrix.os.exe_suffix }}
        if: matrix.os.name == 'macOS'

      - uses: actions/upload-artifact@v2
        with:
          name: swift-${{ matrix.type }}_${{ matrix.os.short_name }}-signed
          path: swift-${{ matrix.type }}_${{ env.VERSION }}_${{ matrix.os.short_name }}${{ matrix.os.exe_suffix }}

  zip_binaries:
    name: Zip Binaries
    timeout-minutes: 10
    needs:
      - sign_binaries
    strategy:
      matrix:
        os:
          - "macos"
          - "windows"
          - "linux"
    runs-on: ubuntu-latest
    steps:
      - name: Store git tag vars.
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Pull swift-files
        uses: actions/download-artifact@v2
        with:
          name: swift-files_${{ matrix.os }}-signed
          path: ${{ matrix.os }}
      - name: Pull swift-settings
        uses: actions/download-artifact@v2
        with:
          name: swift-settings_${{ matrix.os }}-signed
          path: ${{ matrix.os }}
      - name: Pull swift-updater
        uses: actions/download-artifact@v2
        with:
          name: swift-updater_${{ matrix.os }}-signed
          path: ${{ matrix.os }}

      - name: Zip Binaries.
        shell: bash
        run: |
          chmod +x "swift-binaries_${{ matrix.os }}_${{ env.VERSION }}-signed.zip"
          7z a -tzip "swift-binaries_${{ matrix.os }}_${{ env.VERSION }}-signed.zip"

      - name: Sign Binaries.
        shell: bash
        run: |
          codesign \
            -s "${{ secrets.APPLE_DEVELOPER_ID }}" \
            -f --timestamp "swift-binaries_${{ matrix.os }}_${{ env.VERSION }}-signed.zip"
          xcrun altool \
            --notarize-app \
            --file swift-binaries_${{ matrix.os }}_${{ env.VERSION }}-signed.zip\
            --primary-bundle-id ${{ env.APP_BUNDLE_ID }} \
            --apiKey ${{ secrets.APPLE_KEY_ID }} \
            --apiIssuer ${{ secrets.APPLE_ISSUER_ID }}
        if: matrix.os.name == 'macos'

      - uses: actions/upload-artifact@v2
        with:
          name: swift-binaries_${{ matrix.os }}-signed
          path: swift-binaries_${{ matrix.os }}_${{ env.VERSION }}-signed.zip

  release:
    name: Create Release
    needs:
      - zip_binaries
      - sign_installer
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-20.04
    steps:
      - name: Store git tag and date vars.
        run: |
          DATE="$(date '+%Y-%m-%d')";
          echo "DATE=${DATE}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Pull Windows Installer
        uses: actions/download-artifact@v2
        with:
          name: Windows-installer-signed
          path: windows
      - name: Pull Windows Binaries
        uses: actions/download-artifact@v2
        with:
          name: swift-binaries_windows-signed
          path: windows
      - name: Pull Linux Installer
        uses: actions/download-artifact@v2
        with:
          name: Linux-installer
          path: linux
      - name: Pull Linux Binaries
        uses: actions/download-artifact@v2
        with:
          name: swift-binaries_linux-signed
          path: linux
      - name: Pull macOS Installer
        uses: actions/download-artifact@v2
        with:
          name: macOS-installer
          path: macos
      - name: Pull macOS Binaries
        uses: actions/download-artifact@v2
        with:
          name: swift-binaries_macos-signed
          path: macos
      - name: Prepare Release
        shell: bash
        run: |
          echo "WINDOWS_ARCHIVE=$(cat windows/installer-archive.filename)" >>$GITHUB_ENV
          echo "LINUX_ARCHIVE=$(cat linux/installer-archive.filename)" >>$GITHUB_ENV
          echo "MACOS_ARCHIVE=$(cat macos/installer-archive.filename)" >>$GITHUB_ENV
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ env.VERSION }}-${{ env.DATE }}"
          files: |
            windows/${{ env.WINDOWS_ARCHIVE }}
            windows/swift-binaries_windows_${{ env.VERSION }}-signed.zip
            linux/${{ env.LINUX_ARCHIVE }}
            linux/swift-binaries_linux_${{ env.VERSION }}-signed.zip
            macos/${{ env.MACOS_ARCHIVE }}
            macos/swift-binaries_macos_${{ env.VERSION }}-signed.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
