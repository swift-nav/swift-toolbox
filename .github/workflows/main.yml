name: main

on:
  push:
    branches:
      - 'main'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

env:
  PIP_CACHE_DIR: ~/.cache/pip
  RUST_CACHE_DIRS: "~/.cargo/registry\n~/.cargo/git\ntarget\n"
  LIBCLANG_PATH_WIN: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/Llvm/x64/bin"
  CODE_SIGNER_PATH_WIN: "%win10sdk%/x64/signtool.exe"
  CARGO_MAKE_VERSION: 0.35.13
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C debuginfo=0"
  APP_NAME: swift-console
  APP_BUNDLE_ID: com.swift-nav.SwiftConsole

jobs:

  backend_bench:
    name: Backend Benchmarks
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-11, windows-2019 ]
    runs-on: ${{ matrix.os }}
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run ssh-keyscan
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup SSH for Windows Git LFS
        run: |
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "ssh-keyscan github.com >> ~/.ssh/known_hosts"
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "echo '${{ secrets.SSH_KEY }}' >> ~/.ssh/id_rsa"
        if: matrix.os == 'windows-2019'

      - name: Install ${{ runner.os }} Dependencies.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update && sudo apt-get install -y capnproto libudev-dev libssl-dev
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install capnp llvm
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install -y capnproto
              echo "LIBCLANG_PATH=${{ env.LIBCLANG_PATH_WIN }}" >> $GITHUB_ENV
          fi

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ secrets.CACHE_VERSION }}

      - uses: davidB/rust-cargo-make@v1
        with:
          version: ${{ env.CARGO_MAKE_VERSION }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pyproject-toml-${{ secrets.CACHE_VERSION }}-${{ hashFiles('pyproject.toml') }}

      - name: Install ImageMagick
        shell: bash
        run: cargo make install-imagemagick

      - name: Set up python builder
        shell: bash
        run: cargo make setup-builder
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Backend Benchmarks
        run: cargo make backend-benches

  checks:
    name: Code Quality Checks
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ secrets.CACHE_VERSION }}

      - uses: davidB/rust-cargo-make@v1
        with:
          version: ${{ env.CARGO_MAKE_VERSION }}

      - name: Install Dependencies.
        run: sudo apt-get update && sudo apt-get install -y capnproto libudev-dev libssl-dev

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pyproject-toml-${{ secrets.CACHE_VERSION }}-${{ hashFiles('pyproject.toml') }}

      - name: Install ImageMagick
        shell: bash
        run: |
          cargo make install-imagemagick

      - name: Set up python builder
        run: |
          cargo make setup-builder
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Qt
        uses: jurplel/install-qt-action@910f37ee23653fd4b243fe5c7f81ff26a8a6a64e
        with:
          version: '6.3.1'
          setup-python: false

      - name: Run Checks
        run: cargo make check-all

      # TODO Fix qmllint warnings [CPP-798]
      - name: Run qmllint
        continue-on-error: true
        run: cargo make qml-lint

      - name: Run Tests
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: cargo make tests

  build:
    name: Build Binaries
    needs: [ checks, backend_bench ]
    strategy:
      matrix:
        os:
          - { name: ubuntu-20.04, exe_suffix: "", short_name: "linux" }
          - { name: macos-11, exe_suffix: "", short_name: "macos" }
          - { name: windows-2019, exe_suffix: ".exe", short_name: "windows" }
    runs-on: ${{ matrix.os.name }}
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run ssh-keyscan
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup SSH for Windows Git LFS
        run: |
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "ssh-keyscan github.com >> ~/.ssh/known_hosts"
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "echo '${{ secrets.SSH_KEY }}' >> ~/.ssh/id_rsa"
        if: matrix.os.name == 'windows-2019'

      - name: Install ${{ runner.os }} Dependencies.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update
              sudo apt-get install -y \
                capnproto \
                libxcb-icccm4 \
                libxcb-image0 \
                libxcb-keysyms1 \
                libxcb-randr0 \
                libxcb-render-util0 \
                libxcb-render0 \
                libxcb-shape0 \
                libxcb-shm0 \
                libxcb-sync1 \
                libxcb-util1 \
                libxcb-xfixes0 \
                libxcb-xinerama0 \
                libxcb-xkb1 \
                libxkbcommon-x11-0 \
                ruby \
                ruby-dev \
                rubygems \
                build-essential \
                libudev-dev \
                libssl-dev
              sudo gem install public_suffix -v 4.0.7  # This is a fix for U18.
              sudo gem install --no-document fpm
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install capnp llvm create-dmg
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install capnproto nsis
              echo "LIBCLANG_PATH=${{ env.LIBCLANG_PATH_WIN }}" >> $GITHUB_ENV
          fi

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ secrets.CACHE_VERSION }}

      - uses: davidB/rust-cargo-make@v1
        with:
          version: ${{ env.CARGO_MAKE_VERSION }}

      - name: Install ImageMagick
        shell: bash
        run: cargo make install-imagemagick

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pyproject-toml-${{ secrets.CACHE_VERSION }}-${{ hashFiles('pyproject.toml') }}

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

      - name: Set up python builder
        shell: bash
        run: cargo make setup-builder
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store git tag vars.
        shell: bash
        run: echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Build ${{ runner.os }} Binaries.
        shell: bash
        run: cargo make create-dist

      - name: Create ${{ runner.os }} Installers.
        shell: bash
        run: |
          cargo make dist-to-installer
          if [ "$RUNNER_OS" == "Linux" ]; then
              INSTALLER_ARCHIVE=$(find installers/Linux -maxdepth 1 -iname "*.deb")
          elif [ "$RUNNER_OS" == "Windows" ]; then
              INSTALLER_ARCHIVE=$(find installers/Windows -maxdepth 1 -iname "*.exe")
          elif [ "$RUNNER_OS" == "macOS" ]; then
              mv installers/macOS/*.dmg .
              INSTALLER_ARCHIVE=$(find . -maxdepth 1 -iname "*.dmg")
          fi
          echo $INSTALLER_ARCHIVE >installer-archive.filename
          echo "INSTALLER_ARCHIVE=$(cat installer-archive.filename)" >>$GITHUB_ENV
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags') && runner.os == 'Linux'

      - name: Build ${{ runner.os }} swift-files binary.
        run: cargo build --release --bin swift-files --no-default-features --features env_logger,indicatif

      - name: Build ${{ runner.os }} swift-settings binary.
        run: cargo build --release --bin swift-settings --no-default-features --features env_logger

      - name: Build ${{ runner.os }} swift-updater binary.
        run: cargo build --release --bin swift-updater --no-default-features

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no
      - name: Archive ${{ runner.os }} Binaries.
        env:
          OS_NAME: ${{ runner.os }}
        shell: bash
        run: |
          mkdir bench
          cp -r console_backend/tests/data bench
          cp utils/bench_runner.py bench
          cd bench
          7z a -tzip "../$OS_NAME.zip" *;
          cd ..
          echo "${OS_NAME}.zip" >bench-archive.filename;
          echo "BENCH_ARCHIVE=$(cat bench-archive.filename)" >>$GITHUB_ENV
          RELEASE_ARCHIVE=$(find . -maxdepth 1 -iname "*.tar.xz" ! -iname "*-debug*")
          DEBUG_ARCHIVE=$(find . -maxdepth 1 -iname "*-debug.tar.xz")
          echo $RELEASE_ARCHIVE >release-archive.filename
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
          echo $DEBUG_ARCHIVE >debug-archive.filename
          echo "DEBUG_ARCHIVE=$(cat debug-archive.filename)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename
      - uses: actions/upload-artifact@v2
        with:
          name: swift-files_${{ matrix.os.short_name }}
          path: ./target/release/swift-files${{ matrix.os.exe_suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: swift-settings_${{ matrix.os.short_name }}
          path: ./target/release/swift-settings${{ matrix.os.exe_suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: swift-updater_${{ matrix.os.short_name }}
          path: ./target/release/swift-updater${{ matrix.os.exe_suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-installer
          path: |
            ${{ env.INSTALLER_ARCHIVE }}
            installer-archive.filename
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags') && runner.os == 'Linux'
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts-debug
          path: |
            ${{ env.DEBUG_ARCHIVE }}
            debug-archive.filename
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts-bench
          path: |
            ${{ env.BENCH_ARCHIVE }}
            bench-archive.filename
      - name: ${{ runner.os }} Installer Size Benchmark.
        env:
          OS_NAME: ${{ runner.os }}
        shell: bash
        continue-on-error: true
        run: cargo make disk-usage-bench

  frontend_distribute:
    name: Run frontend benchmarks, sign and distribute
    needs: build
    runs-on: ubuntu-latest
    steps:
      - shell: bash
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        run: echo "SHOULD_RELEASE=true"

      - shell: bash
        run: echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: swift-nav
          repo: toolbox-backend-ci
          ref: main
          workflow_file_name: distribute.yml
          client_payload: '{
            "branch": "${{ github.ref_name }}", 
            "run_id": "${{ github.run_id }}",
            "should_release": ${{ env.SHOULD_RELEASE || false}},
            "version": "${{ env.VERSION }}"
          }'
          github_user: "swiftnav-travis"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          propagate_failure: true
          wait_workflow: true
          trigger_workflow: true
