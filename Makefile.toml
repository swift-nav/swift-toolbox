env_scripts = ['''
#!@duckscript
os = os_family
if eq ${os} windows
  set_env PYTHON "${WORKSPACE}\\py39\\python.exe"
  set_env PYSIDE2_RCC "${WORKSPACE}\\py39\\Lib\\site-packages\\PySide2\\rcc.exe"
else
  set_env PYTHON "${WORKSPACE}/py39/bin/python3"
  set_env PYSIDE2_RCC "${WORKSPACE}/py39/bin/pyside2-rcc"
end
''']

[config]
default_to_workspace = false
init_task = "init"
skip_git_env_info = true
skip_rust_env_info = true
skip_crate_env_info = true

[env]
WORKSPACE = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"

[tasks.init]

# Two proposed methods of simplifying path globbing # https://github.com/sagiegurari/cargo-make/issues/542 # https://github.com/sagiegurari/cargo-make/issues/543
[tasks.set-qml-files]
private = true
condition = { env_not_set = ["QML_FILES"] }
script_runner = "@duckscript"
script = '''
!include_files ./utils/glob.ds
qml_files = glob_paths_excluding_target resources/**/*.qml
set_env QML_FILES ${qml_files}
'''

[tasks.set-python-files]
private = true
condition = { env_not_set = ["PYTHON_FILES"] }
script_runner = "@duckscript"
script = '''
!include_files ./utils/glob.ds
py_files = glob_paths_excluding_target ./**/*.py
set_env PYTHON_FILES ${py_files}
'''

[tasks.rustup-update]
command = "rustup"
args = ["update", "stable"]

[tasks.cargo-make-deps-update]
dependencies = ["rustup-update"]
install_crate = { crate_name = "cargo-update", binary = "cargo-install-update", test_arg = [
  "-V",
], min_version = "7.0.1" }
command = "cargo"
args = ["install-update", "taplo-cli", "cargo-make"]

[tasks.generate-common-constants-rs]
script_runner = "@shell"
script = '''
${PYTHON} -m py2many --rust=1 swiftnav_console/constants.py
mv swiftnav_console/constants.rs console_backend/src/common_constants.rs
'''

[tasks.extract-piksi-constants-rs]
script_runner = "@shell"
script = '''
${PYTHON} utils/extract_piksi_tools_constants.py > /tmp/piksi_tools_constants.py
${PYTHON} -m py2many --rust=1 /tmp/piksi_tools_constants.py --outdir console_backend/src/
'''

[tasks.generate-resources]
dependencies = ["run-rcc"]
script_runner = "@shell"
script = '''
echo "$(echo '# pylint: skip-file\n# fmt: off'; cat swiftnav_console/console_resources.py)" > swiftnav_console/console_resources.py
'''

[tasks.run-rcc]
command = "${PYSIDE2_RCC}"
args = [
  "resources/console_resources.qrc",
  "-o",
  "swiftnav_console/console_resources.py",
]

[tasks.check-capnp]
script_runner = "@shell"
script = '''
capnp compile -oc++ src/main/resources/base/console_backend.capnp
rm src/main/resources/base/console_backend.capnp.c++
rm src/main/resources/base/console_backend.capnp.h
'''

[tasks.copy-capnp]
dependencies = ["check-capnp"]
script_runner = "@shell"
script = '''
cp src/main/resources/base/console_backend.capnp console_backend/console_backend.capnp
'''

[tasks.remove-egg-dist]
script_runner = "@shell"
script = '''
rm -rf console_backend/*.dist-info
rm -rf console_backend/*.egg-info
'''

[tasks.remove-egg-dist.windows]
script_runner = "powershell"
script_extension = "ps1"
script = '''
Get-ChildItem .\console_backend -Recurse -Include @("*.egg-info", "*.dist-info") | Remove-Item -Force -Recurse
'''

[tasks.start-console]
command = "${PYTHON}"
args = ["-m", "swiftnav_console.main", "--", "${@}"]

[tasks.run]
dependencies = [
  "copy-capnp",
  "generate-resources",
  "remove-egg-dist",
  "store-version",
  "install-backend",
]
run_task = "start-console"

[tasks.prod-run]
dependencies = [
  "copy-capnp",
  "generate-resources",
  "remove-egg-dist",
  "store-version",
  "prod-install-backend",
]
run_task = "start-console"

[tasks.headless-run]
command = "cargo"
args = [
  "run",
  "--bin",
  "headless-console",
  "--release",
  "--no-default-features",
  "${@}",
]

[tasks.store-version]
script_runner = "@shell"
script = '''
git describe --tags --always > console_backend/src/version.txt
'''

[tasks.install-backend]
command = "${PYTHON}"
args = ["-m", "pip", "install", "-e", "./console_backend"]

[tasks.prod-install-backend]
command = "${PYTHON}"
args = [
  "-m",
  "pip",
  "install",
  "-v",
  "--upgrade",
  "--force",
  "./console_backend",
]

[tasks.get-standalone-py]
cwd = "standalone-py"
condition = { files_not_exist = ["${WORKSPACE}/standalone-py/python"] }
script = { file = "download.sh" }

[tasks.get-standalone-py.windows]
script_runner = "powershell"
script_extension = "ps1"
script = "& ./download.ps1"

[tasks.setup-builder]
dependencies = ["get-standalone-py"]
script = '''
#!/usr/bin/env bash
set -ex
cp -r ./standalone-py/python/install py39
./py39/bin/python3 -m pip install flit . ".[test]"
'''

[tasks.setup-builder.windows]
script_runner = "powershell"
script_extension = "ps1"
script = '''
Copy-Item -Recurse .\standalone-py\python\install py39
.\py39\python ".\get-pip.py"
.\py39\python -m pip install flit . ".[test]"
'''

[tasks.prep-dist]
dependencies = ["get-standalone-py"]
script = '''
#!/usr/bin/env bash
set -ex
rm -rf ./py39-dist
cp -r ./standalone-py/python/install ./py39-dist
./py39-dist/bin/python3 -m pip install .
'''

[tasks.prep-dist.windows]
script_runner = "powershell"
script_extension = "ps1"
script = '''
Remove-Item -Recurse -ErrorAction SilentlyContinue .\py39-dist
Copy-Item -Recurse .\standalone-py\python\install .\py39-dist
.\py39-dist\python .\get-pip.py
.\py39-dist\python -m pip install .
'''

[tasks.build-dist]
dependencies = ["prep-dist"]
script = { file = "${WORKSPACE}/scripts/build-dist.sh", absolute_path = true }

[tasks.build-dist.windows]
script_runner = "powershell"
script_extension = "ps1"
script = "& ./scripts/build-dist.ps1"

[tasks.purge-dist]
script = { file = "${WORKSPACE}/scripts/purge-dist.sh", absolute_path = true }

[tasks.purge-dist.windows]
script_runner = "powershell"
script_extension = "ps1"
script = "& ./scripts/purge-dist.ps1"

[tasks.compress-dist]
script= '''
#!/usr/bin/env bash
set -ex
tar -cvf ./py39-dist.tar ./py39-dist
rm -f ./py39-dist.tar.xz
xz -e -9 ./py39-dist.tar
'''

[tasks.compress-dist.windows]
script_runner = "powershell"
script_extension = "ps1"
script = '''
tar -C ".\py39-dist" -cvf ".\py39-dist.tar" .
Remove-Item -ErrorAction SilentlyContinue "py39-dist.tar.xz"
xz -e -9 ".\py39-dist.tar"
'''

[tasks.create-dist]
dependencies = ["build-dist", "purge-dist", "compress-dist"]

[tasks.prod-installer]
dependencies = [
  "setup-builder",
  "store-version",
  "copy-capnp",
  "generate-resources",
  "create-dist",
]

[tasks.prod-installer.mac]
script_runner = "@shell"
script = '''
mkdir -p main.app/Contents/MacOS main.app/Contents/Resources
cp -r main.dist/* main.app/Contents/MacOS/
iconutil --convert icns src/main/icons/Mac.iconset
mv src/main/icons/Mac.icns main.app/Contents/Resources/SwiftNavConsole.icns
${PYTHON} src/build/generate-mac-info-plist.py
hdiutil create -volname SwiftNavConsole -srcfolder main.app -ov -format UDZO 'swift_navigation_console.dmg' || (echo 'Failed to create Mac dmg. Retrying in 10s...' && sleep 10 && hdiutil create -volname SwiftNavConsole -srcfolder main.app -ov -format UDZO 'swift_navigation_console.dmg' )
'''

[tasks.qml-format]
dependencies = ["set-qml-files"]
env = { QT_APP = { script = ["$PYTHON utils/echo-qt-dir.py"] } }
script_runner = "@shell"
script = '''
${QT_APP}/Qt/bin/qmlformat -i ${QML_FILES}
'''

[tasks.qml-lint]
dependencies = ["set-qml-files"]
env = { QT_APP = { script = ["$PYTHON utils/echo-qt-dir.py"] } }
script_runner = "@shell"
script = '''
${QT_APP}/Qt/bin/qmllint -I ${QT_APP}/../PySide2/Qt/qml/ -I resources/ ${QML_FILES}
'''

[tasks.qml-format-check]
dependencies = ["qml-format"]
run_task = "check-git-diff"

[tasks.rust-format]
dependencies = ["copy-capnp"]
command = "cargo"
args = ["fmt", "--all"]

[tasks.rust-format-check]
dependencies = ["copy-capnp"]
command = "cargo"
args = ["fmt", "--", "--check"]

[tasks.rust-lint]
dependencies = ["store-version", "copy-capnp"]
command = "cargo"
args = ["clippy", "--all-targets", "--", "--deny", "warnings"]

[tasks.rust-tests]
dependencies = ["store-version", "copy-capnp"]
command = "cargo"
cwd = "console_backend"
args = ["test", "--features", "tests", "--", "--nocapture"]

[tasks.rust-type-check]
dependencies = ["store-version", "copy-capnp"]
command = "cargo"
args = ["check"]

[tasks.python-type-check]
dependencies = ["set-python-files"]
command = "${PYTHON}"
args = ["-m", "mypy", "@@split(PYTHON_FILES, )"]

[tasks.python-format-check]
dependencies = ["set-python-files"]
command = "${PYTHON}"
args = ["-m", "black", "--check", "--diff", "@@split(PYTHON_FILES, )"]

[tasks.python-format-all]
dependencies = ["set-python-files"]
command = "${PYTHON}"
args = ["-m", "black", "@@split(PYTHON_FILES, )"]

[tasks.python-format]
alias = "python-format-all"

[tasks.python-lint]
dependencies = ["set-python-files"]
command = "${PYTHON}"
args = ["-m", "pylint", "--output-format=parseable", "@@split(PYTHON_FILES, )"]

[tasks.format-toml-check]
# Note format-toml task is defined by cargo-make to use crate taplo-cli, but the version is
# unspecified.  Task cargo-make-deps-update keeps the dev version in sync with CI.
# https://github.com/sagiegurari/cargo-make/issues/571
dependencies = ["cargo-make-deps-update", "format-toml"]
run_task = "check-git-diff"

[tasks.format-all]
dependencies = [
  "python-format-all",
  "qml-format",
  "rust-format",
  "newline-format",
  "format-toml",
]

[tasks.format]
alias = "format-all"

[tasks.format-check]
dependencies = ["python-format-check", "rust-format-check", "newline-check"]
run_task = "check-git-diff"

[tasks.lint]
dependencies = ["qml-lint", "python-lint", "rust-lint", "format-check"]

[tasks.types]
dependencies = ["python-type-check", "rust-type-check"]

[tasks.check-all]
dependencies = [
  "cargo-make-deps-update",
  "generate-common-constants-rs",
  "extract-piksi-constants-rs",
  "format",
  "lint",
  "types",
]
run_task = "check-git-diff"

[tasks.tests]
dependencies = ["rust-tests"]

# Create 'test' alias
[tasks.test]
clear = true
run_task = "tests"

[tasks.backend-cpu-bench]
dependencies = ["copy-capnp", "generate-resources"]
command = "cargo"
args = ["bench", "--all-features", "--", "--verbose", "--noplot"]

[tasks.backend-cpu-bench-validate]
command = "${PYTHON}"
args = ["utils/bench_runner.py", "--backend_cpu"]

[tasks.backend-mem-bench]
dependencies = ["copy-capnp", "generate-resources"]
command = "cargo"
args = [
  "test",
  "test_run_process_messages",
  "--manifest-path=console_backend/Cargo.toml",
  "--features",
  "benches",
  "--",
  "--nocapture",
]

[tasks.backend-benches]
dependencies = [
  "store-version",
  "backend-cpu-bench",
  "backend-cpu-bench-validate",
  "backend-mem-bench",
]

[tasks.disk-usage-bench]
command = "${PYTHON}"
args = ["utils/bench_runner.py", "--disk_usage"]

[tasks.frontend-cpu-bench.linux]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=${PWD}/../../target/swift_navigation_console/swift_navigation_console
'''

[tasks.frontend-cpu-bench.windows]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=${PWD}/target/swift_navigation_console/swift_navigation_console.exe
'''

[tasks.frontend-cpu-bench.mac]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_cpu --executable=${PWD}/main.dist/main
'''

[tasks.frontend-mem-bench.linux]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=${PWD}/target/swift_navigation_console/swift_navigation_console
'''

[tasks.frontend-mem-bench.windows]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=${PWD}/target/swift_navigation_console/swift_navigation_console.exe
'''

[tasks.frontend-mem-bench.mac]
script_runner = "@shell"
script = '''
echo 'This is only used to validate locally.'
cd console_backend/tests && python ../../utils/bench_runner.py --frontend_mem --executable=${PWD}/main.dist/main
'''

[tasks.newline-terminator]
private = true
script_runner = "python"
script_extension = "py"
script = '''
import os
import sys
import subprocess
def raises_exc(func):
    try: func()
    except: return True
    return False
dry_run = os.environ.get("NLT_DRY_RUN", "") == "1"
open_append = lambda fn: open(fn, "ta")
open_read = lambda fn: open(fn, "rb")
seek_end = lambda fp: (fp.seek(-1, 2), fp)[-1]
has_newline = lambda fn: seek_end(open_read(fn)).read(1) == b"\n"
append_newline = lambda fn: (open_append(fn).write("\n") if not dry_run else None, fn)[-1]
try_open_text = lambda fn: lambda: (open(fn, "ta"), open(fn, "tr").read(4096))
valid_file = lambda fn: os.path.getsize(fn) > 0 and not raises_exc(try_open_text(fn))
no_trailing_lf = lambda fn: valid_file(fn) and not has_newline(fn)
all_files = subprocess.check_output(["git", "ls-files"]).decode('utf8').splitlines()
no_newline = list(map(append_newline, filter(no_trailing_lf, all_files)))
footer = "*********************************************\n"
err = "ERROR: " if dry_run else "Fixing "
header = footer + "*** " + err + "files missing trailing newline ***\n" + footer
sys.stderr.write(header + str.join("\n", no_newline) + "\n" + footer) \
  if no_newline else None
sys.exit(int(len(no_newline) > 0) if dry_run else 0)
'''

[tasks.newline-check]
env = { NLT_DRY_RUN = "1" }
run_task = "newline-terminator"

[tasks.newline-format]
run_task = "newline-terminator"

[tasks.check-git-diff]
command = "git"
args = ["diff", "--exit-code"]
