name: main

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:

jobs:

  ubuntu-rust:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: davidB/rust-cargo-make@v1

      - name: Cache conda
        uses: actions/cache@v1
        env:
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('conda.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: console_pp
          environment-file: conda.yml
          use-only-tar-bz2: true
      
      - name: Install Cap n Proto and FPM.
        run: |
          sudo apt-get install -y capnproto ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm

      - name: Poetry Install
        run: |
          conda activate console_pp
          python -m poetry install

      - name: Run Python Format Check
        run: |
          conda activate console_pp
          cargo make python-format-check

      - name: Run Python Type Check
        run: |
          conda activate console_pp
          cargo make python-type-check

      - name: Run Python Lint Check
        run: |
          conda activate console_pp
          cargo make python-lint

      - name: Run Rust Lint Check
        run: |
          cargo make rust-clippy
          
      - name: Run Rust Format Check
        run: |
          cargo make rust-fmt

      - name: Run Rust Tests
        run: |
          cargo make rust-tests

      - name: Run build
        env:
          OS_NAME: linux
        run: |
          conda activate console_pp
          bash ./.github/ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: ubuntu-rust-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename

  macos-rust:
    runs-on: macos-10.15
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: davidB/rust-cargo-make@v1
        with:
          version: '0.32.11'

      - name: Cache conda
        uses: actions/cache@v1
        env:
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('conda.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: console_pp
          environment-file: conda.yml
          use-only-tar-bz2: true
      
      - name: Install Cap n Proto.
        run: |
          brew install capnp

      - name: Poetry Install
        run: |
          conda activate console_pp
          python -m poetry install

      - name: Run build
        env:
          OS_NAME: osx
        run: |
          conda activate console_pp
          cp $CONDA_PREFIX/lib/python3.9/site-packages/shiboken2/libshiboken2.abi3.5.15.dylib $CONDA_PREFIX/lib/python3.9/site-packages/PySide2/libshiboken2.abi3.5.15.dylib
          bash ./.github/ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: macos-rust-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename

  # windows-rust:
  #   runs-on: windows-2019
  #   steps:

  #     - name: Checkout source
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #         ssh-key: ${{ secrets.SSH_KEY }}

  #     - name: Install LLVM
  #       run: choco install -y --no-progress llvm

  #     - name: Install msys2 packages
  #       uses: msys2/setup-msys2@v2
  #       with:
  #         msystem: MINGW64
  #         install: bash git

  #     - name: Install Rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable-x86_64-pc-windows-msvc
  #         override: true
  #         components: rustfmt, clippy

  #     - name: Run build
  #       shell: msys2 {0}
  #       env:
  #         OS_NAME: windows
  #         LIBCLANG_PATH: "C:\\Program Files\\LLVM\\bin"
  #       run: |
  #         export PATH="$PATH:/C/Rust/.cargo/bin:/C/ProgramData/chocolatey/bin:/C/Program Files/CMake/bin"
  #         bash ./ci-build.sh
  #         echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: windows-rust-artifacts
  #         path: |
  #           ${{ env.RELEASE_ARCHIVE }}
  #           release-archive.filename

  # release:
  #   needs: [ubuntu-rust, windows-rust, macos-rust]
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ubuntu-rust-artifacts
  #     - run: |
  #         ls -l
  #         echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
  #     - name: Upload release asset
  #       if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ env.RELEASE_ARCHIVE }}
  #         asset_name: ${{ env.RELEASE_ARCHIVE }}
  #         asset_content_type: application/gzip
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: macos-rust-artifacts
  #     - run: |
  #         echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
  #     - name: Upload release asset
  #       if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ env.RELEASE_ARCHIVE }}
  #         asset_name: ${{ env.RELEASE_ARCHIVE }}
  #         asset_content_type: application/gzip
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: windows-rust-artifacts
  #     - run: |
  #         echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
  #     - name: Upload release asset
  #       if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ env.RELEASE_ARCHIVE }}
  #         asset_name: ${{ env.RELEASE_ARCHIVE }}
  #         asset_content_type: application/zip
