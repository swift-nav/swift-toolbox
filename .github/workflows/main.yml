name: main

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:

jobs:

  ubuntu-rust:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: davidB/rust-cargo-make@v1

      - name: Cache conda
        uses: actions/cache@v1
        env:
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('conda.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: console_pp
          environment-file: conda.yml
          use-only-tar-bz2: true
      
      - name: Install Dependencies.
        run: |
          sudo apt-get install -y capnproto ruby ruby-dev rubygems build-essential git-lfs
          sudo gem install --no-document fpm

      - name: Poetry Install
        run: |
          conda activate console_pp
          python -m poetry install

      - name: Run Python Format Check
        run: |
          conda activate console_pp
          cargo make python-format-check

      - name: Run Python Type Check
        run: |
          conda activate console_pp
          cargo make python-type-check

      - name: Run Python Lint Check
        run: |
          conda activate console_pp
          cargo make python-lint

      - name: Run Rust Lint Check
        run: |
          cargo make rust-clippy
          
      - name: Run Rust Format Check
        run: |
          cargo make rust-fmt

      - name: Run Rust Tests
        run: |
          cargo make rust-tests

      - name: Run build
        env:
          OS_NAME: linux
        run: |
          conda activate console_pp
          cargo make prod-installer
          bash ./.github/ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: ubuntu-rust-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename

  macos-rust:
    runs-on: macos-10.15
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: davidB/rust-cargo-make@v1
        with:
          version: '0.32.11'

      - name: Cache conda
        uses: actions/cache@v1
        env:
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('conda.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: console_pp
          environment-file: conda.yml
          use-only-tar-bz2: true
      
      - name: Install Dependencies.
        run: |
          brew install capnp git-lfs

      - name: Poetry Install
        run: |
          conda activate console_pp
          python -m poetry install

      - name: Run build
        env:
          OS_NAME: osx
        run: |
          conda activate console_pp
          cargo make prod-mac-nuitka-installer
          bash ./.github/ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: macos-rust-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename
