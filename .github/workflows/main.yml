name: main

on:
  push:
    branches:
      - 'main'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:

  backend_bench:

    name: Backend Benchmarks

    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - macos-10.15
          - windows-2019

    runs-on: ${{ matrix.os }}

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run ssh-keyscan
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup SSH for Windows Git LFS
        run: |
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "ssh-keyscan github.com >> ~/.ssh/known_hosts"
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "echo '${{ secrets.SSH_KEY }}' >> ~/.ssh/id_rsa"
        if: matrix.os == 'windows-2019'

      - name: Install ${{ runner.os }} Dependencies.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get install -y capnproto git-lfs
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install capnp git-lfs
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install -y capnproto git-lfs
          fi

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: davidB/rust-cargo-make@v1
        with:
          version: '0.32.11'

      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: console_pp
          environment-file: conda.yml

      - name: Poetry Install
        run: |
          conda run -n console_pp poetry install

      - name: Run Backend Benchmarks
        shell: bash
        run: |
          cargo make backend-benches

  checks:

    name: Code Quality Checks

    runs-on: ubuntu-latest

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: davidB/rust-cargo-make@v1
        with:
          version: '0.32.11'

      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: console_pp
          environment-file: conda.yml

      - name: Install Dependencies.
        run: |
          sudo apt-get install -y capnproto

      - name: Poetry Install
        run: |
          conda run -n console_pp poetry install

      - name: Run Format Check
        run: |
          cargo make format-check

      - name: Run Type Check
        run: |
          cargo make types

      - name: Run Lint Check
        run: |
          cargo make lint

      - name: Run Tests
        run: |
          cargo make tests

  build:

    name: Build Binaries

    needs:
      - checks
      - backend_bench

    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - macos-10.15
          - windows-2019

    runs-on: ${{ matrix.os }}

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run ssh-keyscan
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup SSH for Windows Git LFS
        run: |
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "ssh-keyscan github.com >> ~/.ssh/known_hosts"
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "echo '${{ secrets.SSH_KEY }}' >> ~/.ssh/id_rsa"
        if: matrix.os == 'windows-2019'

      - name: Install ${{ runner.os }} Dependencies.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get install -y capnproto ruby ruby-dev rubygems build-essential
              sudo gem install --no-document fpm
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install capnp
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install capnproto nsis
          fi

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: davidB/rust-cargo-make@v1
        with:
          version: '0.32.11'

      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: console_pp
          environment-file: conda.yml

      - name: Poetry Install
        run: |
          conda run -n console_pp poetry install

      - name: Build ${{ runner.os }} Binaries.
        env:
          OS_NAME: ${{ runner.os }}
        shell: bash
        run: |
          cargo make prod-installer
      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no
      - name: Zip ${{ runner.os }} Binaries.
        env:
          OS_NAME: ${{ runner.os }}
        shell: bash
        run: |
          bash ./.github/ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
          echo "BENCH_ARCHIVE=$(cat bench.filename)" >>$GITHUB_ENV
      - name: ${{ runner.os }} Installer Size Benchmark.
        env:
          OS_NAME: ${{ runner.os }}
        shell: bash
        run: |
          cargo make disk-usage-bench
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts-bench
          path: |
            ${{ env.BENCH_ARCHIVE }}
            bench.filename
  frontend_bench:
    name: Run Frontend Benchmarks
    continue-on-error: true
    timeout-minutes: 5
    needs:
      - build
    strategy:
      matrix:
        os:
          - Windows
    runs-on: [self-hosted]
    steps:
      - name: Remove previous build.
        shell: bash
        run: |
          rm -rf output
      - uses: actions/download-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts-bench
          path: |
            output
      - name: Extract binary and data.
        run: |
          cd output
          7z x $(cat bench.filename) -aoa -o${{ runner.os }}
          
      - name: Run Frontend Benchmark.
        shell: bash
        run: |
          cd output/${{ runner.os }}
          if [ "$RUNNER_OS" == "Windows" ]; then
              python bench_runner.py --frontend_cpu --executable=swift_navigation_console.exe
          else
              python bench_runner.py --frontend_cpu --executable=swift_navigation_console
          fi

  release:
    name: Create Release
    needs:
      - frontend_bench
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-20.04
    steps:
      - name: Pull Windows Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Windows-artifacts
          path: |
            windows
      - name: Pull Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Linux-artifacts
          path: |
            linux
      - name: Pull macOS Artifacts
        uses: actions/download-artifact@v2
        with:
          name: macOS-artifacts
          path: |
            macos
      - name: Store Env Vars
        shell: bash
        run: |
          echo "WINDOWS_ARCHIVE=$(cat windows/release-archive.filename)" >>$GITHUB_ENV
          echo "LINUX_ARCHIVE=$(cat linux/release-archive.filename)" >>$GITHUB_ENV
          echo "MACOS_ARCHIVE=$(cat macos/release-archive.filename)" >>$GITHUB_ENV
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows/${{ env.WINDOWS_ARCHIVE }}
            linux/${{ env.LINUX_ARCHIVE }}
            macos/${{ env.MACOS_ARCHIVE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
