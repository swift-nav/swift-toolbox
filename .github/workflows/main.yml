name: main

on:
  push:
    branches:
      - 'main'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

env:
  PIP_CACHE_DIR: ~/.cache/pip
  RUST_CACHE_DIRS: "~/.cargo/registry\n~/.cargo/git\ntarget\n"
  LIBCLANG_PATH_WIN: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/Llvm/x64/bin"
  CARGO_MAKE_VERSION: 0.35.0
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C debuginfo=0"

jobs:

  backend_bench:

    name: Backend Benchmarks

    strategy:
      matrix:
        os:
          # - ubuntu-18.04
          # - macos-10.15
          - windows-2019

    runs-on: ${{ matrix.os }}

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run ssh-keyscan
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup SSH for Windows Git LFS
        run: |
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "ssh-keyscan github.com >> ~/.ssh/known_hosts"
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "echo '${{ secrets.SSH_KEY }}' >> ~/.ssh/id_rsa"
        if: matrix.os == 'windows-2019'

      - name: Install ${{ runner.os }} Dependencies.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update && sudo apt-get install -y capnproto libudev-dev
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install capnp llvm
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install -y capnproto
          fi

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1

      - uses: davidB/rust-cargo-make@v1
        with:
          version: ${{ env.CARGO_MAKE_VERSION }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pyproject-toml-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pyproject-toml-
            ${{ runner.os }}-

      - name: Set up python builder
        run: |
          cargo make setup-builder

      - name: Run Backend Benchmarks (Windows)
        env:
          LIBCLANG_PATH: ${{ env.LIBCLANG_PATH_WIN }}
        run: |
          cargo make backend-benches
        if: matrix.os == 'windows-2019'

      - name: Run Backend Benchmarks
        run: |
          cargo make backend-benches
        if: matrix.os != 'windows-2019'

  checks:

    name: Code Quality Checks

    runs-on: ubuntu-18.04

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1

      - uses: davidB/rust-cargo-make@v1
        with:
          version: ${{ env.CARGO_MAKE_VERSION }}

      - name: Install Dependencies.
        run: |
          sudo apt-get update && sudo apt-get install -y capnproto libudev-dev

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pyproject-toml-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pyproject-toml-
            ${{ runner.os }}-

      - name: Set up python builder
        run: |
          cargo make setup-builder

      - name: Run Checks
        run: |
          cargo make check-all

      - name: Run Tests
        run: |
          cargo make tests

  build:

    name: Build Binaries

    needs:
      - checks
      - backend_bench

    strategy:
      matrix:
        os:
          # - ubuntu-18.04
          # - macos-10.15
          - windows-2019

    runs-on: ${{ matrix.os }}

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run ssh-keyscan
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup SSH for Windows Git LFS
        run: |
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "ssh-keyscan github.com >> ~/.ssh/known_hosts"
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "echo '${{ secrets.SSH_KEY }}' >> ~/.ssh/id_rsa"
        if: matrix.os == 'windows-2019'

      - name: Install ${{ runner.os }} Dependencies.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update
              sudo apt-get install -y \
                capnproto \
                libxcb-icccm4 \
                libxcb-image0 \
                libxcb-keysyms1 \
                libxcb-randr0 \
                libxcb-render-util0 \
                libxcb-render0 \
                libxcb-shape0 \
                libxcb-shm0 \
                libxcb-sync1 \
                libxcb-util1 \
                libxcb-xfixes0 \
                libxcb-xinerama0 \
                libxcb-xkb1 \
                libxkbcommon-x11-0 \
                ruby \
                ruby-dev \
                rubygems \
                build-essential \
                libudev-dev
              sudo gem install --no-document fpm
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install capnp llvm
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install capnproto nsis
          fi

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1

      - uses: davidB/rust-cargo-make@v1
        with:
          version: ${{ env.CARGO_MAKE_VERSION }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pyproject-toml-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pyproject-toml-
            ${{ runner.os }}-

      - name: Set up python builder
        run: |
          cargo make setup-builder

      - name: Build ${{ runner.os }} Binaries.
        env:
          LIBCLANG_PATH: ${{ env.LIBCLANG_PATH_WIN }}
        run: |
          cargo make create-dist
        if: matrix.os == 'windows-2019'

      - name: Build ${{ runner.os }} Binaries.
        shell: bash
        run: |
          cargo make create-dist
        if: matrix.os != 'windows-2019'

      - name: Pull Git LFS objects
        run: git lfs pull
        env:
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no
      - name: Archive ${{ runner.os }} Binaries.
        env:
          OS_NAME: ${{ runner.os }}
        shell: bash
        run: |
          mkdir bench
          cp -r console_backend/tests/data bench
          cp utils/bench_runner.py bench
          cd bench
          7z a -tzip "../$OS_NAME.zip" *;
          cd ..
          echo "${OS_NAME}.zip" >bench-archive.filename;
          echo "BENCH_ARCHIVE=$(cat bench-archive.filename)" >>$GITHUB_ENV

          RELEASE_ARCHIVE=$(find . -maxdepth 1 -iname "*.tar.xz")
          echo $RELEASE_ARCHIVE >release-archive.filename
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-artifacts-bench
          path: |
            ${{ env.BENCH_ARCHIVE }}
            bench-archive.filename
      - name: ${{ runner.os }} Installer Size Benchmark.
        env:
          OS_NAME: ${{ runner.os }}
        shell: bash
        run: |
          cargo make disk-usage-bench
  frontend_bench:
    name: Run Frontend Benchmarks
    timeout-minutes: 30
    needs:
      - build
    strategy:
      matrix:
        os:
          # - macOS
          - Windows
          # - Linux
    runs-on: [self-hosted, '${{ matrix.os }}']
    steps:
      - name: Remove previous build.
        shell: bash
        run: |
          rm -rf console
          rm -rf bench

      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            console

      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}-artifacts-bench
          path: |
            bench

      - name: Extract binary and data.
        shell: bash
        run: |
          cd console
          archive=$(cat release-archive.filename)
          7z x $archive -aoa
          7z x ${archive%.xz} -aoa
          echo "extracted release-archive"
          mv ../bench/${{ matrix.os }}.zip .
          7z x ${{ matrix.os }}.zip -aoa
          echo "extracted bench data"

      - name: Run CPU Frontend Benchmark.
        shell: bash
        run: |
          which tar
          cd console
          if [ "$RUNNER_OS" == "Windows" ]; then
              python ../utils/bench_runner.py --frontend_cpu --executable=./Scripts/swiftnav-console.exe
          elif [ "$RUNNER_OS" == "macOS" ]; then
              python ../utils/bench_runner.py --frontend_cpu --executable=./bin/swiftnav-console
          elif [ "$RUNNER_OS" == "Linux" ]; then
              python ../utils/bench_runner.py --frontend_cpu --executable=./bin/swiftnav-console
          fi
      - name: Run MEM Frontend Benchmark.
        shell: bash
        run: |
          cd console
          if [ "$RUNNER_OS" == "Windows" ]; then
              python ../utils/bench_runner.py --frontend_mem --executable=./Scripts/swiftnav-console.exe
          elif [ "$RUNNER_OS" == "macOS" ]; then
              python ../utils/bench_runner.py --frontend_mem --executable=./bin/swiftnav-console
          elif [ "$RUNNER_OS" == "Linux" ]; then
              python ../utils/bench_runner.py --frontend_mem --executable=./bin/swiftnav-console
          fi


  release:
    name: Create Release
    needs:
      - frontend_bench
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-20.04
    steps:
      - name: Store git tag and date vars.
        run: |
          DATE="$(date '+%Y-%m-%d')";
          echo "DATE=${DATE}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Pull Windows Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Windows-artifacts
          path: |
            windows
      - name: Pull Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Linux-artifacts
          path: |
            linux
      - name: Pull macOS Artifacts
        uses: actions/download-artifact@v2
        with:
          name: macOS-artifacts
          path: |
            macos
      - name: Store Env Vars
        shell: bash
        run: |
          echo "WINDOWS_ARCHIVE=$(cat windows/release-archive.filename)" >>$GITHUB_ENV
          echo "LINUX_ARCHIVE=$(cat linux/release-archive.filename)" >>$GITHUB_ENV
          echo "MACOS_ARCHIVE=$(cat macos/release-archive.filename)" >>$GITHUB_ENV
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ env.VERSION }}-${{ env.DATE }}"
          files: |
            windows/${{ env.WINDOWS_ARCHIVE }}
            linux/${{ env.LINUX_ARCHIVE }}
            macos/${{ env.MACOS_ARCHIVE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

